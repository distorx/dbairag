{
  "test_date": "2025-08-24T01:07:01.777689",
  "summary": {
    "total": 200,
    "success": 200,
    "success_rate": 100.0,
    "avg_response_time": 2240.0087535381317,
    "sql_features": {
      "joins": 86,
      "subqueries": 32,
      "aggregations": 70,
      "groupby": 39,
      "windows": 22
    },
    "complexity_distribution": {
      "complex": 67,
      "standard": 106,
      "very_complex": 15,
      "moderate": 12
    }
  },
  "results": [
    {
      "id": 1,
      "query": "show students with their city, region, and municipio names",
      "complexity": "complex",
      "success": true,
      "response_time": 24208.067893981934,
      "sql": "SELECT TOP 100 * FROM Students WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 2,
      "query": "list all students with their family members and the family members' occupations",
      "complexity": "complex",
      "success": true,
      "response_time": 603.0819416046143,
      "sql": "SELECT TOP 100 u.Id, u.UserName, u.Email, r.Name as Role\n                                  FROM AspNetUsers u WITH (NOLOCK)\n                                  INNER JOIN AspNetUserRoles ur WITH (NOLOCK) ON u.Id = ur.UserId\n                                  INNER JOIN AspNetRoles r WITH (NOLOCK) ON ur.RoleId = r.Id\n                                  WHERE r.Name LIKE '%Student%'\n                                  ORDER BY u.UserName",
      "sql_length": 432,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 3,
      "query": "get students with their scholarship application status and the reviewing board members",
      "complexity": "complex",
      "success": true,
      "response_time": 2205.4824829101562,
      "sql": "SELECT s.Id, s.FirstName, s.LastName, sa.Status, sa.BoardMember1Id, sa.BoardMember2Id, sa.BoardMember3Id \nFROM Students s WITH (NOLOCK)\nJOIN ScholarshipApplications sa WITH (NOLOCK) ON s.Id = sa.StudentId \nWHERE s.IsActive = 1",
      "sql_length": 226,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 4,
      "query": "show family members with their students and the students' high schools",
      "complexity": "complex",
      "success": true,
      "response_time": 595.989465713501,
      "sql": "SELECT TOP 100 u.Id, u.UserName, u.Email, r.Name as Role\n                                  FROM AspNetUsers u WITH (NOLOCK)\n                                  INNER JOIN AspNetUserRoles ur WITH (NOLOCK) ON u.Id = ur.UserId\n                                  INNER JOIN AspNetRoles r WITH (NOLOCK) ON ur.RoleId = r.Id\n                                  WHERE r.Name LIKE '%Student%'\n                                  ORDER BY u.UserName",
      "sql_length": 432,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 5,
      "query": "display students with all their documents and document types",
      "complexity": "complex",
      "success": true,
      "response_time": 8282.665014266968,
      "sql": "SELECT s.*, sd.*, sdt.* \nFROM Students s WITH (NOLOCK)\nJOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nJOIN ScholarshipDocumentTypes sdt WITH (NOLOCK) ON sd.DocumentTypeId = sdt.Id",
      "sql_length": 194,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 6,
      "query": "find students with their addresses including city, region, and country details",
      "complexity": "complex",
      "success": true,
      "response_time": 518.4080600738525,
      "sql": "SELECT COUNT(*) AS total FROM Students WITH (NOLOCK)",
      "sql_length": 52,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 7,
      "query": "show all relationships between students and their legal guardians with guardian occupations",
      "complexity": "complex",
      "success": true,
      "response_time": 668.769121170044,
      "sql": "SELECT TOP 100 * FROM Students WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 8,
      "query": "list students with their application history and all status changes",
      "complexity": "complex",
      "success": true,
      "response_time": 2575.798511505127,
      "sql": "SELECT s.Id, s.FirstName, s.LastName, sa.ApplicationNumber, sa.Status, sa.SubmittedAt, sa.ReviewedAt, sa.ApprovedAt \nFROM Students s WITH (NOLOCK)\nLEFT JOIN ScholarshipApplications sa WITH (NOLOCK) ON s.Id = sa.StudentId \nORDER BY s.LastName, sa.SubmittedAt",
      "sql_length": 257,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 9,
      "query": "get family trees showing students, parents, and siblings in one query",
      "complexity": "standard",
      "success": true,
      "response_time": 664.6537780761719,
      "sql": "SELECT TOP 100 * FROM Students WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 10,
      "query": "show students with their academic records and the schools they attended",
      "complexity": "complex",
      "success": true,
      "response_time": 695.3203678131104,
      "sql": "SELECT TOP 100 * FROM Students WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 11,
      "query": "display all users with their roles and the permissions for each role",
      "complexity": "complex",
      "success": true,
      "response_time": 2335.547685623169,
      "sql": "SELECT u.Id AS UserId, u.FirstName, u.LastName, r.Name AS RoleName, c.ClaimType, c.ClaimValue\nFROM AspNetUsers u WITH (NOLOCK)\nJOIN AspNetUserRoles ur WITH (NOLOCK) ON u.Id = ur.UserId\nJOIN AspNetRoles r WITH (NOLOCK) ON ur.RoleId = r.Id\nJOIN AspNetRoleClaims c WITH (NOLOCK) ON r.Id = c.RoleId",
      "sql_length": 294,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 12,
      "query": "find students linked to multiple family members with different relationships",
      "complexity": "complex",
      "success": true,
      "response_time": 600.8100509643555,
      "sql": "SELECT TOP 100 u.Id, u.UserName, u.Email, r.Name as Role\n                                  FROM AspNetUsers u WITH (NOLOCK)\n                                  INNER JOIN AspNetUserRoles ur WITH (NOLOCK) ON u.Id = ur.UserId\n                                  INNER JOIN AspNetRoles r WITH (NOLOCK) ON ur.RoleId = r.Id\n                                  WHERE r.Name LIKE '%Student%'\n                                  ORDER BY u.UserName",
      "sql_length": 432,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 13,
      "query": "show scholarship applications with student details, family income, and recommendations",
      "complexity": "complex",
      "success": true,
      "response_time": 1942.779779434204,
      "sql": "SELECT sa.*, s.*, fm.AnnualIncome, sr.*\nFROM ScholarshipApplications sa WITH (NOLOCK)\nJOIN Students s WITH (NOLOCK) ON sa.StudentId = s.Id\nJOIN FamilyMembers fm WITH (NOLOCK) ON s.Id = fm.StudentId\nJOIN StudentRecommendeds sr WITH (NOLOCK) ON s.StudentRecommendedId = sr.Id\nWHERE s.IsActive = 1 AND fm.IsDeceased = 0",
      "sql_length": 316,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 14,
      "query": "get students with their emergency contacts and contact relationships",
      "complexity": "complex",
      "success": true,
      "response_time": 2208.0299854278564,
      "sql": "SELECT s.Id, s.FirstName, s.LastName, f.FirstName AS EmergencyContactFirstName, f.LastName AS EmergencyContactLastName, f.Relationship\nFROM Students s WITH (NOLOCK)\nJOIN FamilyMembers f WITH (NOLOCK) ON s.Id = f.StudentId\nWHERE f.IsLegalRepresentative = 1",
      "sql_length": 255,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 15,
      "query": "list all audit logs with user details and the affected student records",
      "complexity": "complex",
      "success": true,
      "response_time": 658.4281921386719,
      "sql": "SELECT TOP 100 u.Id, u.UserName, u.Email, r.Name as Role\n                                  FROM AspNetUsers u WITH (NOLOCK)\n                                  INNER JOIN AspNetUserRoles ur WITH (NOLOCK) ON u.Id = ur.UserId\n                                  INNER JOIN AspNetRoles r WITH (NOLOCK) ON ur.RoleId = r.Id\n                                  WHERE r.Name LIKE '%Student%'\n                                  ORDER BY u.UserName",
      "sql_length": 432,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 16,
      "query": "show document submissions with student info, document type, and verification status",
      "complexity": "complex",
      "success": true,
      "response_time": 657.1621894836426,
      "sql": "SELECT TOP 100 * FROM Students WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 17,
      "query": "find students with incomplete applications and missing document types",
      "complexity": "complex",
      "success": true,
      "response_time": 516.5202617645264,
      "sql": "SELECT COUNT(DISTINCT s.Id) AS total \n                          FROM Students s WITH (NOLOCK)\n                          LEFT JOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\n                          WHERE sd.StudentId IS NULL",
      "sql_length": 239,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 18,
      "query": "display family members who are also students in the system",
      "complexity": "standard",
      "success": true,
      "response_time": 2040.5945777893066,
      "sql": "SELECT fm.* \nFROM FamilyMembers fm WITH (NOLOCK)\nJOIN Students s WITH (NOLOCK) ON fm.StudentId = s.Id",
      "sql_length": 101,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 19,
      "query": "get circular references where students are family members of other students",
      "complexity": "standard",
      "success": true,
      "response_time": 2231.132745742798,
      "sql": "SELECT DISTINCT f1.StudentId, f2.StudentId \nFROM FamilyMembers f1 WITH (NOLOCK)\nJOIN FamilyMembers f2 WITH (NOLOCK) ON f1.StudentId <> f2.StudentId AND f1.Relationship IN ('Sibling', 'Parent', 'Child')\nWHERE f1.StudentId IN (SELECT StudentId FROM FamilyMembers f3 WITH (NOLOCK) WHERE f3.StudentId = f2.StudentId)",
      "sql_length": 312,
      "has_join": true,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 20,
      "query": "show all many-to-many relationships between students and programs",
      "complexity": "standard",
      "success": true,
      "response_time": 660.9432697296143,
      "sql": "SELECT TOP 100 * FROM Students WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 21,
      "query": "list students with their counselors and counselor's other students",
      "complexity": "complex",
      "success": true,
      "response_time": 3204.608917236328,
      "sql": "SELECT s.Id AS StudentId, s.FirstName AS StudentFirstName, s.LastName AS StudentLastName, c.Id AS CounselorId, c.FirstName AS CounselorFirstName, c.LastName AS CounselorLastName, otherStudents.Id AS OtherStudentId\nFROM Students s WITH (NOLOCK)\nJOIN AspNetUsers c WITH (NOLOCK) ON s.CounselorId = c.Id\nLEFT JOIN Students otherStudents WITH (NOLOCK) ON c.Id = otherStudents.CounselorId AND otherStudents.Id <> s.Id\nWHERE s.IsActive = 1 AND c.IsActive = 1",
      "sql_length": 452,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 22,
      "query": "find shared addresses between different students and family members",
      "complexity": "standard",
      "success": true,
      "response_time": 595.6268310546875,
      "sql": "SELECT TOP 100 u.Id, u.UserName, u.Email, r.Name as Role\n                                  FROM AspNetUsers u WITH (NOLOCK)\n                                  INNER JOIN AspNetUserRoles ur WITH (NOLOCK) ON u.Id = ur.UserId\n                                  INNER JOIN AspNetRoles r WITH (NOLOCK) ON ur.RoleId = r.Id\n                                  WHERE r.Name LIKE '%Student%'\n                                  ORDER BY u.UserName",
      "sql_length": 432,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 23,
      "query": "show inheritance of attributes from parent to child records",
      "complexity": "standard",
      "success": true,
      "response_time": 2235.3742122650146,
      "sql": "SELECT s.Id AS StudentId, s.FirstName, s.LastName, sd.DocumentName, sd.FileName\nFROM Students s WITH (NOLOCK)\nJOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nWHERE sd.IsActive = 1",
      "sql_length": 193,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 24,
      "query": "get transitive relationships through multiple join tables",
      "complexity": "standard",
      "success": true,
      "response_time": 2209.7134590148926,
      "sql": "SELECT s.Id, s.FirstName, s.LastName, sd.DocumentName, sd.Status \nFROM Students s WITH (NOLOCK)\nJOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nJOIN DocumentSubmissions ds WITH (NOLOCK) ON s.Id = ds.StudentId\nWHERE s.IsActive = 1",
      "sql_length": 243,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 25,
      "query": "display students connected through common family members",
      "complexity": "complex",
      "success": true,
      "response_time": 3220.792293548584,
      "sql": "SELECT DISTINCT s1.Id, s1.FirstName, s1.LastName\nFROM Students s1 WITH (NOLOCK)\nJOIN FamilyMembers fm1 WITH (NOLOCK) ON s1.Id = fm1.StudentId\nJOIN FamilyMembers fm2 WITH (NOLOCK) ON fm1.Relationship = fm2.Relationship AND fm1.Id <> fm2.Id\nJOIN Students s2 WITH (NOLOCK) ON fm2.StudentId = s2.Id\nWHERE s1.Id <> s2.Id",
      "sql_length": 315,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 26,
      "query": "find all second-degree relationships in the family network",
      "complexity": "standard",
      "success": true,
      "response_time": 2706.45809173584,
      "sql": "SELECT DISTINCT fm1.FirstName AS FirstName1, fm1.LastName AS LastName1, \n                fm2.FirstName AS FirstName2, fm2.LastName AS LastName2\nFROM FamilyMembers fm1 WITH (NOLOCK)\nJOIN FamilyMembers fm2 WITH (NOLOCK) ON fm1.StudentId = fm2.StudentId\nWHERE fm1.Id <> fm2.Id AND \n      (fm1.Relationship IN ('Parent', 'Sibling') AND fm2.Relationship IN ('Parent', 'Sibling'))",
      "sql_length": 374,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 27,
      "query": "show students with same last name but different families",
      "complexity": "complex",
      "success": true,
      "response_time": 652.6956558227539,
      "sql": "SELECT TOP 100 * FROM Students WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 28,
      "query": "get all polymorphic associations in the user system",
      "complexity": "standard",
      "success": true,
      "response_time": 2071.0389614105225,
      "sql": "SELECT DISTINCT u.Id, u.FirstName, u.LastName, u.Email, r.Name AS RoleName\nFROM AspNetUsers u WITH (NOLOCK)\nJOIN AspNetUserRoles ur WITH (NOLOCK) ON u.Id = ur.UserId\nJOIN AspNetRoles r WITH (NOLOCK) ON ur.RoleId = r.Id",
      "sql_length": 218,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 29,
      "query": "list records with composite foreign keys",
      "complexity": "complex",
      "success": true,
      "response_time": 2502.4776458740234,
      "sql": "SELECT * FROM StudentDocuments sd WITH (NOLOCK)\nJOIN Students s ON sd.StudentId = s.Id\nJOIN ScholarshipDocumentTypes sdt ON sd.DocumentTypeId = sdt.Id\nJOIN DocumentSubmissions ds ON sd.SubmissionId = ds.Id\nWHERE sd.IsActive = 1",
      "sql_length": 227,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 30,
      "query": "show self-referential joins in family relationships",
      "complexity": "standard",
      "success": true,
      "response_time": 2369.8554039001465,
      "sql": "SELECT f1.FirstName AS FamilyMemberFirstName, f1.LastName AS FamilyMemberLastName, f2.FirstName AS RelatedFamilyMemberFirstName, f2.LastName AS RelatedFamilyMemberLastName\nFROM FamilyMembers f1 WITH (NOLOCK)\nJOIN FamilyMembers f2 WITH (NOLOCK) ON f1.StudentId = f2.StudentId AND f1.Id <> f2.Id",
      "sql_length": 293,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 31,
      "query": "find bridging tables connecting multiple entities",
      "complexity": "standard",
      "success": true,
      "response_time": 7148.562431335449,
      "sql": "SELECT DISTINCT 'StudentDocuments' AS TableName\nFROM StudentDocuments WITH (NOLOCK)\nUNION\nSELECT DISTINCT 'StudentDocuments_Backup_20250811_055943' AS TableName\nFROM StudentDocuments_Backup_20250811_055943 WITH (NOLOCK)\nUNION\nSELECT DISTINCT 'StudentDocuments_Backup_Duplicates' AS TableName\nFROM StudentDocuments_Backup_Duplicates WITH (NOLOCK)\nUNION\nSELECT DISTINCT 'StudentDocuments_Backup_Production_20250723' AS TableName\nFROM StudentDocuments_Backup_Production_20250723 WITH (NOLOCK)\nUNION\nSELECT DISTINCT 'StudentDocuments_Copy' AS TableName\nFROM StudentDocuments_Copy WITH (NOLOCK)\nUNION\nSELECT DISTINCT 'StudentDocumentsRick' AS TableName\nFROM StudentDocumentsRick WITH (NOLOCK)\nUNION\nSELECT DISTINCT 'StudentDocumentsRick2' AS TableName\nFROM StudentDocumentsRick2 WITH (NOLOCK)\nUNION\nSELECT DISTINCT 'StudentDocumentsSave' AS TableName\nFROM StudentDocumentsSave WITH (NOLOCK)\nUNION\nSELECT DISTINCT 'StudentDocumemtsCepe' AS TableName\nFROM StudentDocumemtsCepe WITH (NOLOCK)\nUNION\nSELECT DISTINCT 'StudentDocumentTypes' AS TableName\nFROM StudentDocumentTypes WITH (NOLOCK)\nUNION\nSELECT DISTINCT 'StudentInstitutions' AS TableName\nFROM StudentInstitutions WITH (NOLOCK)\nUNION\nSELECT",
      "sql_length": 1190,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 32,
      "query": "display hierarchical data with parent-child relationships",
      "complexity": "complex",
      "success": true,
      "response_time": 5084.288597106934,
      "sql": "SELECT \n    sd.Id AS DocumentId,\n    sd.DocumentName,\n    sd.StudentId,\n    sd.ParentDocumentId,\n    sd.IsActive,\n    sd.CreatedAt,\n    sd.UpdatedAt,\n    sd.UploadedBy,\n    sd.DocumentTypeId,\n    sd.IsVerified,\n    sd.VerifiedAt,\n    sd.VerifiedBy,\n    sd.ExpirationDate,\n    sd.ReviewNotes,\n    sd.ReviewedBy,\n    sd.ReviewedAt,\n    sd.IssuingAuthority,\n    sd.IssueDate,\n    sd.DocumentNumber,\n    sd.Version,\n    sd.IsOriginal,\n    sd.Notes,\n    sd.ExtractedText,\n    sd.ExtractionError,\n    sd.ExtractionStatus,\n    sd.IsEncrypted,\n    sd.OriginalFileName,\n    sd.StorageLocation,\n    sd.StoredFileName,\n    sd.TextExtractedAt,\n    sd.SubmissionId,\n    sd.RejectionReason,\n    sd.RejectionDate,\n    sd.RejectedBy,\n    sd.AzureBlobName,\n    sd.LastUploadError,\n    sd.AzureContentLength,\n    sd.AzureContentMD5,\n    sd.AzureETag,\n    sd.AzureUploadedAt,\n    sd.AzureVerifiedAt,\n    sd.LastUploadAttempt,\n    sd.UploadAttempts,\n    sd.RequiresManualReview,\n    sd.VerificationRetryCount,\n    sd.AzureContainerName,\n    sd.AzureVerified,\n    parent.DocumentName AS ParentDocumentName\nFROM \n    StudentDocuments sd WITH (NOLOCK)\nLEFT JOIN",
      "sql_length": 1138,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 33,
      "query": "get network graph of all student connections",
      "complexity": "standard",
      "success": true,
      "response_time": 3088.3328914642334,
      "sql": "SELECT s1.Id AS StudentId1, s1.FirstName AS FirstName1, s1.LastName AS LastName1, \n       s2.Id AS StudentId2, s2.FirstName AS FirstName2, s2.LastName AS LastName2\nFROM Students s1 WITH (NOLOCK)\nJOIN FamilyMembers fm1 WITH (NOLOCK) ON s1.Id = fm1.StudentId\nJOIN FamilyMembers fm2 WITH (NOLOCK) ON fm1.Relationship = fm2.Relationship AND fm1.StudentId <> fm2.StudentId\nJOIN Students s2 WITH (NOLOCK) ON fm2.StudentId = s2.Id\nWHERE s1.IsActive = 1 AND s2.IsActive = 1",
      "sql_length": 465,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 34,
      "query": "show students related through multiple paths",
      "complexity": "standard",
      "success": true,
      "response_time": 673.92897605896,
      "sql": "SELECT TOP 100 * FROM Students WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 35,
      "query": "find isolated student records with no relationships",
      "complexity": "complex",
      "success": true,
      "response_time": 3092.961072921753,
      "sql": "SELECT s.Id, s.FirstName, s.LastName \nFROM Students s WITH (NOLOCK)\nLEFT JOIN StudentDocuments sd ON s.Id = sd.StudentId\nLEFT JOIN StudentInstitutions si ON s.Id = si.StudentId\nLEFT JOIN FamilyMembers fm ON s.Id = fm.StudentId\nLEFT JOIN ScholarshipApplication sa ON s.Id = sa.StudentId\nLEFT JOIN DocumentSubmissions ds ON s.Id = ds.StudentId\nLEFT JOIN StudentRecommendeds sr ON s.StudentRecommendedId = sr.Id\nWHERE sd.StudentId IS NULL \nAND si.StudentId IS NULL \nAND fm.StudentId IS NULL \nAND sa.StudentId IS NULL \nAND ds.StudentId IS NULL \nAND sr.Id IS NULL",
      "sql_length": 558,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 36,
      "query": "display maximum relationship depth in family trees",
      "complexity": "standard",
      "success": true,
      "response_time": 1565.9253597259521,
      "sql": "SELECT MAX(Depth) AS MaxRelationshipDepth\nFROM (\n    SELECT StudentId, COUNT(*) AS Depth\n    FROM FamilyMembers WITH (NOLOCK)\n    GROUP BY StudentId\n) AS Depths",
      "sql_length": 160,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 37,
      "query": "get students with cross-referenced documents",
      "complexity": "complex",
      "success": true,
      "response_time": 2210.4814052581787,
      "sql": "SELECT DISTINCT s.Id, s.FirstName, s.LastName \nFROM Students s WITH (NOLOCK)\nJOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nJOIN StudentDocumemtsCepe sdc WITH (NOLOCK) ON s.Id = sdc.StudentId\nWHERE s.IsActive = 1 AND sd.IsActive = 1 AND sdc.IsActive = 1",
      "sql_length": 268,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 38,
      "query": "show parallel relationships between same entities",
      "complexity": "standard",
      "success": true,
      "response_time": 3243.5035705566406,
      "sql": "SELECT sd1.Id, sd1.DocumentName, sd1.StudentId, sd2.Id AS ParallelId, sd2.DocumentName AS ParallelDocumentName\nFROM StudentDocuments sd1 WITH (NOLOCK)\nJOIN StudentDocuments sd2 WITH (NOLOCK) ON sd1.StudentId = sd2.StudentId AND sd1.Id <> sd2.Id\nWHERE sd1.IsActive = 1 AND sd2.IsActive = 1",
      "sql_length": 288,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 39,
      "query": "find redundant relationship paths",
      "complexity": "standard",
      "success": true,
      "response_time": 2099.8494625091553,
      "sql": "SELECT DISTINCT a.Id, a.StudentId, a.DocumentName \nFROM StudentDocuments a WITH (NOLOCK)\nJOIN StudentDocuments b WITH (NOLOCK) ON a.StudentId = b.StudentId AND a.Id <> b.Id\nWHERE a.IsActive = 1 AND b.IsActive = 1",
      "sql_length": 212,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 40,
      "query": "display students with conflicting relationship data",
      "complexity": "complex",
      "success": true,
      "response_time": 1738.236427307129,
      "sql": "SELECT s.Id, s.FirstName, s.LastName, f.Relationship \nFROM Students s WITH (NOLOCK)\nJOIN FamilyMembers f WITH (NOLOCK) ON s.Id = f.StudentId\nWHERE f.IsDeceased = 1 AND f.IsLegalRepresentative = 1",
      "sql_length": 195,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 41,
      "query": "calculate average family size grouped by city and region",
      "complexity": "standard",
      "success": true,
      "response_time": 2595.5898761749268,
      "sql": "SELECT Cities.Name AS City, Regions.Region, AVG(FamilyMembers.Id) AS AverageFamilySize\nFROM FamilyMembers WITH (NOLOCK)\nJOIN Students WITH (NOLOCK) ON FamilyMembers.StudentId = Students.Id\nJOIN Cities WITH (NOLOCK) ON Students.CityIdPhysical = Cities.Id\nJOIN Municipios WITH (NOLOCK) ON Cities.MunicipioId = Municipios.Id\nJOIN Regions WITH (NOLOCK) ON Municipios.Id = Regions.Id\nGROUP BY Cities.Name, Regions.Region",
      "sql_length": 415,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 42,
      "query": "find the median age of students per high school",
      "complexity": "standard",
      "success": true,
      "response_time": 1617.6745891571045,
      "sql": "SELECT HighSchoolId, \n       PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY DATEDIFF(YEAR, DateOfBirth, GETDATE())) AS MedianAge\nFROM Students WITH (NOLOCK)\nGROUP BY HighSchoolId",
      "sql_length": 175,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 43,
      "query": "compute standard deviation of application scores by region",
      "complexity": "standard",
      "success": true,
      "response_time": 1568.617820739746,
      "sql": "SELECT RegionORE, \n       STDEV(TotalCollegeBoard) AS StandardDeviation \nFROM EstudiantesExcelenciaAcademica WITH (NOLOCK) \nGROUP BY RegionORE",
      "sql_length": 142,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 44,
      "query": "calculate percentile rankings of students by GPA",
      "complexity": "very_complex",
      "success": true,
      "response_time": 519.1388130187988,
      "sql": "SELECT COUNT(DISTINCT s.Id) AS total \n                          FROM Students s WITH (NOLOCK) \n                          LEFT JOIN Cities c1 WITH (NOLOCK) ON s.CityIdPhysical = c1.Id \n                          LEFT JOIN Cities c2 WITH (NOLOCK) ON s.CityIdPostal = c2.Id \n                          WHERE c1.Name LIKE '%GPA%' \n                             OR c2.Name LIKE '%GPA%'",
      "sql_length": 377,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 45,
      "query": "find correlation between family income and scholarship approval",
      "complexity": "moderate",
      "success": true,
      "response_time": 2526.174306869507,
      "sql": "SELECT f.AnnualIncome, COUNT(DISTINCT sa.Id) AS ScholarshipApprovalCount\nFROM FamilyMembers f WITH (NOLOCK)\nJOIN Students s WITH (NOLOCK) ON f.StudentId = s.Id\nJOIN ScholarshipApplications sa WITH (NOLOCK) ON s.Id = sa.StudentId\nWHERE sa.Status = 1 -- Assuming 1 indicates approved status\nGROUP BY f.AnnualIncome",
      "sql_length": 312,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 46,
      "query": "compute year-over-year growth rate of applications",
      "complexity": "complex",
      "success": true,
      "response_time": 2730.40771484375,
      "sql": "SELECT \n    YEAR(SubmittedAt) AS Year,\n    COUNT(*) AS TotalApplications,\n    LAG(COUNT(*)) OVER (ORDER BY YEAR(SubmittedAt)) AS PreviousYearApplications,\n    (COUNT(*) - LAG(COUNT(*)) OVER (ORDER BY YEAR(SubmittedAt))) * 1.0 / NULLIF(LAG(COUNT(*)) OVER (ORDER BY YEAR(SubmittedAt)), 0) AS GrowthRate\nFROM \n    ScholarshipApplication WITH (NOLOCK)\nGROUP BY \n    YEAR(SubmittedAt)\nORDER BY \n    Year",
      "sql_length": 398,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 47,
      "query": "calculate cumulative sum of approvals by month",
      "complexity": "standard",
      "success": true,
      "response_time": 1815.8700466156006,
      "sql": "SELECT \n    FORMAT(ApprovedAt, 'yyyy-MM') AS ApprovalMonth,\n    COUNT(*) AS TotalApprovals\nFROM \n    ScholarshipApplications WITH (NOLOCK)\nWHERE \n    ApprovedAt IS NOT NULL\nGROUP BY \n    FORMAT(ApprovedAt, 'yyyy-MM')\nORDER BY \n    ApprovalMonth",
      "sql_length": 244,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 48,
      "query": "find mode of family member ages per household",
      "complexity": "standard",
      "success": true,
      "response_time": 1397.2783088684082,
      "sql": "SELECT FamilyMembers.StudentId, \n       AVG(DATEDIFF(YEAR, FamilyMembers.DateOfBirth, GETDATE())) AS AverageAge\nFROM FamilyMembers WITH (NOLOCK)\nGROUP BY FamilyMembers.StudentId",
      "sql_length": 177,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 49,
      "query": "compute variance in processing times by application type",
      "complexity": "moderate",
      "success": true,
      "response_time": 1441.4210319519043,
      "sql": "SELECT ApplicationType, VARIANCE(ProcessingTime) AS VarianceProcessingTime\nFROM ScholarshipApplications WITH (NOLOCK)\nGROUP BY ApplicationType",
      "sql_length": 142,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 50,
      "query": "calculate weighted average of scores by credit hours",
      "complexity": "standard",
      "success": true,
      "response_time": 1919.2783832550049,
      "sql": "SELECT SUM(s.GPA * c.CreditHours) / SUM(c.CreditHours) AS WeightedAverage\nFROM Students s WITH (NOLOCK)\nJOIN Courses c WITH (NOLOCK) ON s.Id = c.StudentId\nWHERE s.IsActive = 1",
      "sql_length": 175,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 51,
      "query": "find geometric mean of sequential growth rates",
      "complexity": "standard",
      "success": true,
      "response_time": 1717.9961204528809,
      "sql": "SELECT EXP(AVG(LOG(GrowthRate))) AS GeometricMeanGrowthRate\nFROM (SELECT (CurrentValue / LAG(CurrentValue) OVER (ORDER BY Date)) - 1 AS GrowthRate\n      FROM YourTableName WITH (NOLOCK)) AS GrowthRates",
      "sql_length": 201,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 52,
      "query": "compute harmonic mean of rate-based metrics",
      "complexity": "standard",
      "success": true,
      "response_time": 1558.6061477661133,
      "sql": "SELECT AVG(1.0 / Rate) AS HarmonicMeanRate\nFROM (\n    SELECT Rate\n    FROM YourRateTable WITH (NOLOCK)\n    WHERE IsActive = 1\n) AS Rates",
      "sql_length": 136,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 53,
      "query": "calculate coefficient of variation for each metric",
      "complexity": "standard",
      "success": true,
      "response_time": 1833.88090133667,
      "sql": "SELECT \n    StudentId,\n    AVG(GPA) AS AverageGPA,\n    STDEV(GPA) AS StdDevGPA,\n    (STDEV(GPA) / AVG(GPA)) * 100 AS CoefficientOfVariationGPA\nFROM \n    Students WITH (NOLOCK)\nGROUP BY \n    StudentId",
      "sql_length": 199,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 54,
      "query": "find z-scores for student performance metrics",
      "complexity": "moderate",
      "success": true,
      "response_time": 2548.3710765838623,
      "sql": "SELECT \n    s.Id AS StudentId,\n    s.FirstName,\n    s.LastName,\n    (s.GPA - AVG(s.GPA) OVER()) / NULLIF(STDDEV(s.GPA) OVER(), 0) AS GPAScoreZ,\n    (s.CollegeBoardScore - AVG(s.CollegeBoardScore) OVER()) / NULLIF(STDDEV(s.CollegeBoardScore) OVER(), 0) AS CollegeBoardScoreZ\nFROM \n    Students s WITH (NOLOCK) \nWHERE \n    s.IsActive = 1",
      "sql_length": 335,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 55,
      "query": "compute confidence intervals for approval rates",
      "complexity": "standard",
      "success": true,
      "response_time": 2056.852102279663,
      "sql": "SELECT \n    COUNT(CASE WHEN sa.Status = 1 THEN 1 END) * 1.0 / COUNT(*) AS ApprovalRate,\n    AVG(CASE WHEN sa.Status = 1 THEN 1 ELSE 0 END) AS ConfidenceInterval\nFROM \n    ScholarshipApplications sa WITH (NOLOCK) \nWHERE \n    sa.Status IN (0, 1)",
      "sql_length": 243,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 56,
      "query": "calculate moving averages over 3, 6, and 12 month windows",
      "complexity": "complex",
      "success": true,
      "response_time": 2764.312505722046,
      "sql": "SELECT \n    StudentId,\n    AVG(CASE WHEN DATEDIFF(MONTH, CreatedAt, GETDATE()) <= 3 THEN GPA END) AS MovingAverage3Months,\n    AVG(CASE WHEN DATEDIFF(MONTH, CreatedAt, GETDATE()) <= 6 THEN GPA END) AS MovingAverage6Months,\n    AVG(CASE WHEN DATEDIFF(MONTH, CreatedAt, GETDATE()) <= 12 THEN GPA END) AS MovingAverage12Months\nFROM \n    Students WITH (NOLOCK)\nWHERE \n    IsActive = 1\nGROUP BY \n    StudentId",
      "sql_length": 404,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 57,
      "query": "find exponential moving average of applications",
      "complexity": "standard",
      "success": true,
      "response_time": 1851.7141342163086,
      "sql": "SELECT \n    ApplicationNumber, \n    AVG(Status) OVER (ORDER BY SubmittedAt ROWS BETWEEN 4 PRECEDING AND CURRENT ROW) AS ExponentialMovingAverage\nFROM \n    ScholarshipApplication WITH (NOLOCK)",
      "sql_length": 191,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 58,
      "query": "compute compound annual growth rate of enrollments",
      "complexity": "standard",
      "success": true,
      "response_time": 2130.8536529541016,
      "sql": "SELECT \n    (EXP(SUM(LOG(EnrollmentCount)) / COUNT(*)) - 1) * 100 AS CompoundAnnualGrowthRate\nFROM \n    (SELECT \n        YEAR(SubmittedAt) AS EnrollmentYear, \n        COUNT(*) AS EnrollmentCount\n     FROM \n        ScholarshipApplications WITH (NOLOCK)\n     GROUP BY \n        YEAR(SubmittedAt)) AS YearlyEnrollments",
      "sql_length": 314,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 59,
      "query": "calculate interquartile range of family incomes",
      "complexity": "standard",
      "success": true,
      "response_time": 2835.7455730438232,
      "sql": "SELECT \n    PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY AnnualIncome) AS Q3,\n    PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY AnnualIncome) AS Q1,\n    (PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY AnnualIncome) - PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY AnnualIncome)) AS InterquartileRange\nFROM FamilyMembers WITH (NOLOCK) \nWHERE IsDeceased = 0",
      "sql_length": 350,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 60,
      "query": "find outliers using 1.5 * IQR rule",
      "complexity": "standard",
      "success": true,
      "response_time": 2448.8844871520996,
      "sql": "SELECT * FROM (\n    SELECT *,\n           PERCENTILE_CONT(0.25) WITHIN GROUP (ORDER BY GPA) OVER () AS Q1,\n           PERCENTILE_CONT(0.75) WITHIN GROUP (ORDER BY GPA) OVER () AS Q3\n    FROM Students WITH (NOLOCK)\n) AS subquery\nWHERE GPA < (Q1 - 1.5 * (Q3 - Q1)) OR GPA > (Q3 + 1.5 * (Q3 - Q1))",
      "sql_length": 293,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 61,
      "query": "compute skewness and kurtosis of distributions",
      "complexity": "standard",
      "success": true,
      "response_time": 2357.255458831787,
      "sql": "SELECT \n    StudentId,\n    COUNT(*) AS TotalDocuments,\n    AVG(FileSize) AS AverageFileSize,\n    STDEV(FileSize) AS StdDevFileSize,\n    SUM(CASE WHEN IsActive = 1 THEN 1 ELSE 0 END) AS ActiveDocuments,\n    SUM(CASE WHEN IsActive = 0 THEN 1 ELSE 0 END) AS InactiveDocuments\nFROM \n    StudentDocuments WITH (NOLOCK)\nGROUP BY \n    StudentId",
      "sql_length": 337,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 62,
      "query": "calculate Gini coefficient for income inequality",
      "complexity": "standard",
      "success": true,
      "response_time": 1695.014476776123,
      "sql": "SELECT \n    1 - (SUM(CASE WHEN AnnualIncome IS NOT NULL THEN AnnualIncome END) / (SELECT SUM(AnnualIncome) FROM FamilyMembers WITH (NOLOCK))) AS GiniCoefficient\nFROM \n    FamilyMembers WITH (NOLOCK)\nWHERE \n    IsDeceased = 0",
      "sql_length": 224,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 63,
      "query": "find Pareto distribution of top performers",
      "complexity": "standard",
      "success": true,
      "response_time": 1521.8348503112793,
      "sql": "SELECT StudentId, COUNT(*) AS DocumentCount\nFROM StudentDocuments WITH (NOLOCK)\nWHERE IsActive = 1\nGROUP BY StudentId\nORDER BY DocumentCount DESC",
      "sql_length": 145,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 64,
      "query": "compute Shannon entropy of categorical distributions",
      "complexity": "standard",
      "success": true,
      "response_time": 2458.9474201202393,
      "sql": "SELECT \n    DocumentTypeId, \n    COUNT(*) * 1.0 / SUM(COUNT(*)) OVER () AS Probability,\n    -SUM((COUNT(*) * 1.0 / SUM(COUNT(*)) OVER ()) * LOG(COUNT(*) * 1.0 / SUM(COUNT(*)) OVER ())) AS ShannonEntropy\nFROM \n    StudentDocuments WITH (NOLOCK)\nWHERE \n    IsActive = 1\nGROUP BY \n    DocumentTypeId",
      "sql_length": 296,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 65,
      "query": "calculate chi-square test statistics",
      "complexity": "standard",
      "success": true,
      "response_time": 1690.4187202453613,
      "sql": "SELECT \n    SUM((Observed - Expected) * (Observed - Expected) / Expected) AS ChiSquareStatistic\nFROM \n    (SELECT \n        COUNT(*) AS Observed, \n        ExpectedValue AS Expected \n     FROM \n        YourTableName \n     GROUP BY \n        YourGroupingColumn) AS Subquery",
      "sql_length": 269,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 66,
      "query": "find covariance matrix between multiple variables",
      "complexity": "moderate",
      "success": true,
      "response_time": 2632.1933269500732,
      "sql": "SELECT \n    AVG(a.GPA * b.GPA) - AVG(a.GPA) * AVG(b.GPA) AS Covariance_GPA,\n    AVG(a.CollegeBoardScore * b.CollegeBoardScore) - AVG(a.CollegeBoardScore) * AVG(b.CollegeBoardScore) AS Covariance_CollegeBoardScore\nFROM \n    Students a WITH (NOLOCK)\nJOIN \n    Students b WITH (NOLOCK) ON a.Id <> b.Id\nWHERE \n    a.IsActive = 1 AND b.IsActive = 1",
      "sql_length": 343,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 67,
      "query": "compute eigenvectors of correlation matrix",
      "complexity": "moderate",
      "success": true,
      "response_time": 6629.662275314331,
      "sql": "SELECT * FROM StudentDocuments WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 68,
      "query": "calculate principal components of student features",
      "complexity": "standard",
      "success": true,
      "response_time": 1881.4735412597656,
      "sql": "SELECT \n    StudentId, \n    AVG(GPA) AS AverageGPA, \n    AVG(CollegeBoardScore) AS AverageCollegeBoardScore \nFROM \n    Students WITH (NOLOCK) \nWHERE \n    IsActive = 1 \nGROUP BY \n    StudentId",
      "sql_length": 191,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 69,
      "query": "find clusters using distance metrics",
      "complexity": "standard",
      "success": true,
      "response_time": 1258.0804824829102,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE IsActive = 1",
      "sql_length": 55,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 70,
      "query": "compute silhouette scores for groupings",
      "complexity": "standard",
      "success": true,
      "response_time": 2954.484701156616,
      "sql": "SELECT StudentId, AVG(SilhouetteScore) AS AverageSilhouetteScore\nFROM (\n    SELECT StudentId, \n           (B.SilhouetteScore - A.SilhouetteScore) / \n           NULLIF(GREATEST(B.SilhouetteScore, A.SilhouetteScore), 0) AS SilhouetteScore\n    FROM StudentDocuments A\n    JOIN StudentDocuments B ON A.StudentId = B.StudentId\n    WHERE A.IsActive = 1 AND B.IsActive = 1\n) AS Scores\nGROUP BY StudentId WITH (NOLOCK)",
      "sql_length": 410,
      "has_join": true,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 71,
      "query": "calculate lift and support for association rules",
      "complexity": "standard",
      "success": true,
      "response_time": 3355.8754920959473,
      "sql": "SELECT \n    COUNT(DISTINCT a.Id) AS Support_A,\n    COUNT(DISTINCT b.Id) AS Support_B,\n    COUNT(DISTINCT c.Id) AS Support_A_and_B,\n    (COUNT(DISTINCT c.Id) * 1.0 / COUNT(DISTINCT a.Id)) AS Lift_A_given_B\nFROM \n    StudentDocuments a WITH (NOLOCK)\nJOIN \n    StudentDocuments b WITH (NOLOCK) ON a.StudentId = b.StudentId\nJOIN \n    StudentDocuments c WITH (NOLOCK) ON a.StudentId = c.StudentId AND a.Id = c.Id\nWHERE \n    a.IsActive = 1 AND b.IsActive = 1 AND c.IsActive = 1",
      "sql_length": 471,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 72,
      "query": "find seasonal decomposition of time series",
      "complexity": "standard",
      "success": true,
      "response_time": 1480.7782173156738,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE CreatedAt >= '2023-10-01' AND CreatedAt < '2023-11-01'",
      "sql_length": 97,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 73,
      "query": "compute autocorrelation of sequential data",
      "complexity": "moderate",
      "success": true,
      "response_time": 2749.5505809783936,
      "sql": "SELECT \n    a.Id, \n    a.StudentId, \n    a.DocumentName, \n    a.Status, \n    a.IsActive, \n    a.CreatedAt, \n    a.UpdatedAt, \n    a.DocumentTypeId, \n    b.Id AS SubmissionId, \n    b.Status AS SubmissionStatus \nFROM \n    StudentDocuments a WITH (NOLOCK) \nJOIN \n    DocumentSubmissions b WITH (NOLOCK) ON a.SubmissionId = b.Id \nWHERE \n    a.IsActive = 1",
      "sql_length": 351,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 74,
      "query": "calculate cross-correlation between series",
      "complexity": "moderate",
      "success": true,
      "response_time": 1222.092866897583,
      "sql": "SELECT COUNT(*) FROM StudentDocuments WITH (NOLOCK) WHERE IsActive = 1",
      "sql_length": 70,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 75,
      "query": "find Fourier transform of periodic patterns",
      "complexity": "standard",
      "success": true,
      "response_time": 1388.7741565704346,
      "sql": "SELECT * FROM Students WITH (NOLOCK)",
      "sql_length": 36,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 76,
      "query": "rank students by GPA within each high school",
      "complexity": "very_complex",
      "success": true,
      "response_time": 593.757152557373,
      "sql": "SELECT COUNT(DISTINCT s.Id) AS total \n                          FROM Students s WITH (NOLOCK) \n                          LEFT JOIN Cities c1 WITH (NOLOCK) ON s.CityIdPhysical = c1.Id \n                          LEFT JOIN Cities c2 WITH (NOLOCK) ON s.CityIdPostal = c2.Id \n                          WHERE c1.Name LIKE '%GPA within each high school%' \n                             OR c2.Name LIKE '%GPA within each high school%'",
      "sql_length": 425,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 77,
      "query": "calculate running total of applications per day",
      "complexity": "standard",
      "success": true,
      "response_time": 1999.4409084320068,
      "sql": "SELECT \n    CAST(SubmittedAt AS DATE) AS ApplicationDate,\n    COUNT(*) OVER (ORDER BY CAST(SubmittedAt AS DATE) ROWS UNBOUNDED PRECEDING) AS RunningTotal\nFROM \n    ScholarshipApplications WITH (NOLOCK)\nGROUP BY \n    CAST(SubmittedAt AS DATE)\nORDER BY \n    ApplicationDate",
      "sql_length": 271,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 78,
      "query": "find dense rank of students by application score",
      "complexity": "complex",
      "success": true,
      "response_time": 1386.69753074646,
      "sql": "SELECT StudentId, \n       DENSE_RANK() OVER (ORDER BY CollegeBoardScore DESC) AS Rank\nFROM Students WITH (NOLOCK) \nWHERE IsActive = 1",
      "sql_length": 133,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 79,
      "query": "compute row number partitioned by city and ordered by age",
      "complexity": "complex",
      "success": true,
      "response_time": 1296.73433303833,
      "sql": "SELECT ROW_NUMBER() OVER (PARTITION BY CityId ORDER BY DateOfBirth) AS RowNum, *\nFROM Students WITH (NOLOCK)",
      "sql_length": 108,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 80,
      "query": "calculate percent rank of family income within regions",
      "complexity": "very_complex",
      "success": true,
      "response_time": 1793.9705848693848,
      "sql": "SELECT \n    f.RegionORE,\n    PERCENT_RANK() OVER (PARTITION BY f.RegionORE ORDER BY f.AnnualIncome) AS IncomePercentRank\nFROM \n    FamilyMembers f WITH (NOLOCK)",
      "sql_length": 160,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 81,
      "query": "find cumulative distribution of student ages",
      "complexity": "standard",
      "success": true,
      "response_time": 1670.6435680389404,
      "sql": "SELECT \n    DATEDIFF(YEAR, DateOfBirth, GETDATE()) AS Age,\n    COUNT(*) OVER (ORDER BY DATEDIFF(YEAR, DateOfBirth, GETDATE())) AS CumulativeCount\nFROM Students WITH (NOLOCK)",
      "sql_length": 173,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 82,
      "query": "compute lag and lead values for time series comparison",
      "complexity": "standard",
      "success": true,
      "response_time": 2405.5697917938232,
      "sql": "SELECT \n    Id,\n    LAG(SubmittedAt) OVER (ORDER BY SubmittedAt) AS PreviousSubmissionDate,\n    LEAD(SubmittedAt) OVER (ORDER BY SubmittedAt) AS NextSubmissionDate\nFROM \n    DocumentSubmissions WITH (NOLOCK)",
      "sql_length": 207,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 83,
      "query": "calculate ntile quartiles of performance metrics",
      "complexity": "standard",
      "success": true,
      "response_time": 1561.7015361785889,
      "sql": "SELECT NTILE(4) OVER (ORDER BY GPA) AS Quartile, COUNT(*) AS StudentCount\nFROM Students WITH (NOLOCK)\nWHERE IsActive = 1\nGROUP BY NTILE(4) OVER (ORDER BY GPA)",
      "sql_length": 158,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 84,
      "query": "find first and last values in ordered groups",
      "complexity": "standard",
      "success": true,
      "response_time": 1350.1787185668945,
      "sql": "SELECT MIN(Id) AS FirstValue, MAX(Id) AS LastValue\nFROM Students WITH (NOLOCK)\nGROUP BY HighSchoolId",
      "sql_length": 100,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 85,
      "query": "compute nth value in sliding windows",
      "complexity": "complex",
      "success": true,
      "response_time": 3108.659267425537,
      "sql": "SELECT Id, StudentId, DocumentName, Description, FileName, ContentType, FileSize, FilePath, BlobUrl, FileHash, Status, IsRequired, IsVerified, VerifiedAt, VerifiedBy, ExpirationDate, ReviewNotes, ReviewedBy, ReviewedAt, IssuingAuthority, IssueDate, DocumentNumber, Version, IsOriginal, ParentDocumentId, Notes, CreatedAt, UpdatedAt, UploadedBy, DocumentTypeId, ExtractedText, ExtractionError, ExtractionStatus, IsActive, IsEncrypted, OriginalFileName, StorageLocation, StoredFileName, TextExtractedAt, SubmissionId\nFROM StudentDocuments WITH (NOLOCK)\nWHERE IsActive = 1\nORDER BY CreatedAt\nOFFSET @Offset ROWS\nFETCH NEXT @Fetch ROWS ONLY",
      "sql_length": 636,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 86,
      "query": "calculate difference from group average for each student",
      "complexity": "standard",
      "success": true,
      "response_time": 2711.13920211792,
      "sql": "SELECT s.Id, s.FirstName, s.LastName, \n       (s.GPA - avgGPA.AvgGPA) AS GPA_Difference\nFROM Students s WITH (NOLOCK)\nJOIN (SELECT AVG(GPA) AS AvgGPA FROM Students WITH (NOLOCK)) avgGPA ON 1=1\nWHERE s.IsActive = 1",
      "sql_length": 213,
      "has_join": true,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 87,
      "query": "find percentage of total within categories",
      "complexity": "complex",
      "success": true,
      "response_time": 1581.1336040496826,
      "sql": "SELECT \n    Category, \n    COUNT(*) * 100.0 / (SELECT COUNT(*) FROM YourTable WITH (NOLOCK)) AS Percentage\nFROM \n    YourTable WITH (NOLOCK)\nGROUP BY \n    Category",
      "sql_length": 163,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 88,
      "query": "compute rank without gaps using dense rank",
      "complexity": "very_complex",
      "success": true,
      "response_time": 1365.1785850524902,
      "sql": "SELECT StudentId, \n       DENSE_RANK() OVER (ORDER BY GPA DESC) AS Rank\nFROM Students WITH (NOLOCK)\nWHERE IsActive = 1",
      "sql_length": 118,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 89,
      "query": "calculate moving sum over last 7 records",
      "complexity": "complex",
      "success": true,
      "response_time": 2065.260171890259,
      "sql": "SELECT StudentId, SUM(FileSize) OVER (PARTITION BY StudentId ORDER BY CreatedAt ROWS BETWEEN 6 PRECEDING AND CURRENT ROW) AS MovingSum\nFROM StudentDocuments WITH (NOLOCK)",
      "sql_length": 170,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 90,
      "query": "find previous and next record values",
      "complexity": "standard",
      "success": true,
      "response_time": 1594.2728519439697,
      "sql": "SELECT * FROM StudentDocuments WITH (NOLOCK) \nWHERE Id = (SELECT TOP 1 Id FROM StudentDocuments WITH (NOLOCK) WHERE Id < @CurrentId ORDER BY Id DESC)\nOR Id = (SELECT TOP 1 Id FROM StudentDocuments WITH (NOLOCK) WHERE Id > @CurrentId ORDER BY Id ASC)",
      "sql_length": 249,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 91,
      "query": "compute cumulative count with reset conditions",
      "complexity": "complex",
      "success": true,
      "response_time": 1500.2059936523438,
      "sql": "SELECT COUNT(*) OVER (ORDER BY CreatedAt ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS CumulativeCount\nFROM StudentDocuments WITH (NOLOCK)\nWHERE IsActive = 1",
      "sql_length": 164,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 92,
      "query": "calculate expanding window statistics",
      "complexity": "complex",
      "success": true,
      "response_time": 1642.1961784362793,
      "sql": "SELECT \n    StudentId, \n    COUNT(*) AS DocumentCount \nFROM \n    StudentDocuments WITH (NOLOCK) \nWHERE \n    IsActive = 1 \nGROUP BY \n    StudentId",
      "sql_length": 145,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 93,
      "query": "find gaps and islands in sequential data",
      "complexity": "standard",
      "success": true,
      "response_time": 3348.0751514434814,
      "sql": "SELECT DISTINCT s.Id, s.FirstName, s.LastName\nFROM Students s WITH (NOLOCK)\nLEFT JOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId AND sd.IsActive = 1\nLEFT JOIN DocumentSubmissions ds WITH (NOLOCK) ON s.Id = ds.StudentId\nWHERE sd.Id IS NULL AND ds.Id IS NULL",
      "sql_length": 270,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 94,
      "query": "compute session windows with timeout logic",
      "complexity": "very_complex",
      "success": true,
      "response_time": 1119.957447052002,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE IsActive = 1",
      "sql_length": 55,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 95,
      "query": "calculate tumbling windows for streaming data",
      "complexity": "complex",
      "success": true,
      "response_time": 2489.3391132354736,
      "sql": "SELECT \n    DATEADD(MINUTE, DATEDIFF(MINUTE, 0, CreatedAt) / 5 * 5, 0) AS WindowStart,\n    COUNT(*) AS TotalRecords\nFROM \n    StudentDocuments WITH (NOLOCK)\nGROUP BY \n    DATEADD(MINUTE, DATEDIFF(MINUTE, 0, CreatedAt) / 5 * 5, 0)\nORDER BY \n    WindowStart",
      "sql_length": 255,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 96,
      "query": "find overlapping window aggregations",
      "complexity": "complex",
      "success": true,
      "response_time": 2188.255548477173,
      "sql": "SELECT \n    COUNT(DISTINCT sa.Id) \nFROM \n    ScholarshipApplications sa WITH (NOLOCK)\nJOIN \n    Students s WITH (NOLOCK) ON sa.StudentId = s.Id\nWHERE \n    sa.Status = 1 \n    AND sa.SubmittedAt BETWEEN '2023-01-01' AND '2023-12-31' \n    AND s.IsActive = 1",
      "sql_length": 254,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 97,
      "query": "compute hopping windows with custom stride",
      "complexity": "very_complex",
      "success": true,
      "response_time": 1789.77632522583,
      "sql": "SELECT \n    StudentId, \n    COUNT(*) AS DocumentCount \nFROM \n    StudentDocuments WITH (NOLOCK) \nWHERE \n    IsActive = 1 \nGROUP BY \n    StudentId \nHAVING \n    COUNT(*) > 1",
      "sql_length": 171,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 98,
      "query": "calculate range between current and preceding rows",
      "complexity": "standard",
      "success": true,
      "response_time": 8785.030126571655,
      "sql": "SELECT \n    Id, \n    StudentId, \n    DocumentName, \n    Description, \n    FileName, \n    ContentType, \n    FileSize, \n    FilePath, \n    BlobUrl, \n    FileHash, \n    Status, \n    IsRequired, \n    IsVerified, \n    VerifiedAt, \n    VerifiedBy, \n    ExpirationDate, \n    ReviewNotes, \n    ReviewedBy, \n    ReviewedAt, \n    IssuingAuthority, \n    IssueDate, \n    DocumentNumber, \n    Version, \n    IsOriginal, \n    ParentDocumentId, \n    Notes, \n    CreatedAt, \n    UpdatedAt, \n    UploadedBy, \n    DocumentTypeId, \n    ExtractedText, \n    ExtractionError, \n    ExtractionStatus, \n    IsActive, \n    IsEncrypted, \n    OriginalFileName, \n    StorageLocation, \n    StoredFileName, \n    TextExtractedAt, \n    SubmissionId,\n    LAG(FileSize) OVER (PARTITION BY StudentId ORDER BY CreatedAt) AS PreviousFileSize,\n    FileSize - LAG(FileSize) OVER (PARTITION BY StudentId ORDER BY CreatedAt) AS SizeDifference\nFROM \n    StudentDocuments WITH (NOLOCK) \nWHERE \n    IsActive = 1",
      "sql_length": 965,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 99,
      "query": "find peers within value ranges",
      "complexity": "complex",
      "success": true,
      "response_time": 1154.1545391082764,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE GPA BETWEEN 3.0 AND 4.0 AND IsActive = 1",
      "sql_length": 83,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 100,
      "query": "compute relative position in sorted groups",
      "complexity": "standard",
      "success": true,
      "response_time": 1687.2828006744385,
      "sql": "SELECT StudentId, \n       RANK() OVER (PARTITION BY DocumentTypeId ORDER BY CreatedAt DESC) AS RankPosition\nFROM StudentDocuments WITH (NOLOCK) \nWHERE IsActive = 1",
      "sql_length": 163,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 101,
      "query": "calculate running variance and standard deviation",
      "complexity": "moderate",
      "success": true,
      "response_time": 2173.677682876587,
      "sql": "SELECT \n    StudentId,\n    VAR(Value) OVER (PARTITION BY StudentId ORDER BY CreatedAt ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RunningVariance,\n    STDEV(Value) OVER (PARTITION BY StudentId ORDER BY CreatedAt ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) AS RunningStandardDeviation\nFROM \n    YourTableName WITH (NOLOCK) \nWHERE \n    IsActive = 1",
      "sql_length": 361,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 102,
      "query": "find local maxima and minima in windows",
      "complexity": "complex",
      "success": true,
      "response_time": 5506.281614303589,
      "sql": "SELECT \n    Id, \n    StudentId, \n    DocumentName, \n    Description, \n    FileName, \n    ContentType, \n    FileSize, \n    FilePath, \n    BlobUrl, \n    FileHash, \n    Status, \n    IsRequired, \n    IsVerified, \n    VerifiedAt, \n    VerifiedBy, \n    ExpirationDate, \n    ReviewNotes, \n    ReviewedBy, \n    ReviewedAt, \n    IssuingAuthority, \n    IssueDate, \n    DocumentNumber, \n    Version, \n    IsOriginal, \n    ParentDocumentId, \n    Notes, \n    CreatedAt, \n    UpdatedAt, \n    UploadedBy, \n    DocumentTypeId, \n    ExtractedText, \n    ExtractionError, \n    ExtractionStatus, \n    IsActive, \n    IsEncrypted, \n    OriginalFileName, \n    StorageLocation, \n    StoredFileName, \n    TextExtractedAt, \n    SubmissionId \nFROM \n    StudentDocuments WITH (NOLOCK) \nWHERE \n    IsActive = 1 \nORDER BY \n    CreatedAt",
      "sql_length": 806,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 103,
      "query": "compute window frame with exclusion",
      "complexity": "very_complex",
      "success": true,
      "response_time": 2007.9617500305176,
      "sql": "SELECT \n    StudentId, \n    SUM(FileSize) OVER (PARTITION BY StudentId ORDER BY CreatedAt ROWS BETWEEN UNBOUNDED PRECEDING AND UNBOUNDED FOLLOWING EXCLUDE CURRENT ROW) AS TotalFileSize\nFROM \n    StudentDocuments WITH (NOLOCK) \nWHERE \n    IsActive = 1",
      "sql_length": 250,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 104,
      "query": "calculate custom window boundaries",
      "complexity": "complex",
      "success": true,
      "response_time": 6579.976797103882,
      "sql": "SELECT \n    *,\n    ROW_NUMBER() OVER (PARTITION BY StudentId ORDER BY CreatedAt) AS RowNum,\n    COUNT(*) OVER (PARTITION BY StudentId) AS TotalCount\nFROM \n    StudentDocuments WITH (NOLOCK)",
      "sql_length": 189,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 105,
      "query": "find pattern matching across windows",
      "complexity": "complex",
      "success": true,
      "response_time": 1769.000768661499,
      "sql": "SELECT DISTINCT d.Id \nFROM StudentDocuments d WITH (NOLOCK)\nJOIN Students s WITH (NOLOCK) ON d.StudentId = s.Id\nWHERE d.IsActive = 1",
      "sql_length": 132,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 106,
      "query": "find students with above average GPA in their school",
      "complexity": "complex",
      "success": true,
      "response_time": 499.0191459655762,
      "sql": "SELECT AVG(CAST(GPA AS FLOAT)) AS average FROM Students WITH (NOLOCK)",
      "sql_length": 69,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 107,
      "query": "get family members with more dependents than average",
      "complexity": "complex",
      "success": true,
      "response_time": 2122.8179931640625,
      "sql": "SELECT fm.* \nFROM FamilyMembers fm WITH (NOLOCK) \nWHERE fm.StudentId IN (\n    SELECT StudentId \n    FROM FamilyMembers \n    GROUP BY StudentId \n    HAVING COUNT(*) > (\n        SELECT AVG(DependentCount) \n        FROM (\n            SELECT COUNT(*) AS DependentCount \n            FROM FamilyMembers \n            GROUP BY StudentId\n        ) AS AvgDependents\n    )\n)",
      "sql_length": 363,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 108,
      "query": "show applications with processing time above 90th percentile",
      "complexity": "very_complex",
      "success": true,
      "response_time": 4051.880121231079,
      "sql": "SELECT sa.* \nFROM ScholarshipApplications sa WITH (NOLOCK)\nWHERE DATEDIFF(DAY, sa.SubmittedAt, sa.ApprovedAt) > \n    (SELECT TOP 1 PERCENT DATEDIFF(DAY, SubmittedAt, ApprovedAt) \n     FROM ScholarshipApplications WITH (NOLOCK) \n     WHERE ApprovedAt IS NOT NULL \n     ORDER BY DATEDIFF(DAY, SubmittedAt, ApprovedAt) DESC)",
      "sql_length": 321,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 109,
      "query": "find students in top 10% of their graduating class",
      "complexity": "standard",
      "success": true,
      "response_time": 507.6878070831299,
      "sql": "SELECT TOP 10 * FROM Students WITH (NOLOCK)",
      "sql_length": 43,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 110,
      "query": "get regions with approval rate higher than national average",
      "complexity": "complex",
      "success": true,
      "response_time": 2698.259115219116,
      "sql": "SELECT r.Id, r.Region, COUNT(DISTINCT sa.Id) * 1.0 / COUNT(DISTINCT s.Id) AS ApprovalRate\nFROM Regions r\nJOIN ScholarshipApplications sa ON r.Id = sa.StudentId\nJOIN Students s ON sa.StudentId = s.Id\nGROUP BY r.Id, r.Region\nHAVING COUNT(DISTINCT sa.Id) * 1.0 / COUNT(DISTINCT s.Id) > (SELECT AVG(ApprovalRate) FROM (SELECT COUNT(DISTINCT sa2.Id) * 1.0 / COUNT(DISTINCT s2.Id) AS ApprovalRate FROM ScholarshipApplications sa2 JOIN Students s2 ON sa2.StudentId = s2.Id GROUP BY s2.Id) AS NationalAverage) \nWITH (NOLOCK)",
      "sql_length": 516,
      "has_join": true,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 111,
      "query": "show cities with more students than median city size",
      "complexity": "complex",
      "success": true,
      "response_time": 777.4128913879395,
      "sql": "SELECT TOP 100 * FROM Students WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 112,
      "query": "find outlier families by income using nested statistics",
      "complexity": "moderate",
      "success": true,
      "response_time": 1952.3506164550781,
      "sql": "SELECT StudentId, AVG(AnnualIncome) AS AverageIncome\nFROM FamilyMembers WITH (NOLOCK)\nGROUP BY StudentId\nHAVING AVG(AnnualIncome) > (SELECT AVG(AnnualIncome) + 2 * STDEV(AnnualIncome) FROM FamilyMembers WITH (NOLOCK)) OR \n       AVG(AnnualIncome) < (SELECT AVG(AnnualIncome) - 2 * STDEV(AnnualIncome) FROM FamilyMembers WITH (NOLOCK))",
      "sql_length": 334,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 113,
      "query": "get students with scores better than their school average",
      "complexity": "complex",
      "success": true,
      "response_time": 1592.2729969024658,
      "sql": "SELECT s.Id, s.FirstName, s.LastName, s.GPA \nFROM Students s WITH (NOLOCK)\nJOIN HighSchools h WITH (NOLOCK) ON s.HighSchoolId = h.Id\nWHERE s.GPA > (SELECT AVG(GPA) FROM Students WHERE HighSchoolId = h.Id)",
      "sql_length": 204,
      "has_join": true,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 114,
      "query": "show documents submitted faster than typical processing",
      "complexity": "standard",
      "success": true,
      "response_time": 1481.2824726104736,
      "sql": "SELECT d.Id, d.DocumentName, d.SubmittedAt \nFROM DocumentSubmissions d WITH (NOLOCK) \nWHERE d.SubmittedAt < DATEADD(DAY, -7, GETDATE()) \nAND d.Status = 'Processed'",
      "sql_length": 163,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 115,
      "query": "find anomalous patterns using multiple subqueries",
      "complexity": "standard",
      "success": true,
      "response_time": 2211.1971378326416,
      "sql": "SELECT * \nFROM (SELECT StudentId, COUNT(DISTINCT Id) AS DocumentCount \n      FROM StudentDocuments WITH (NOLOCK) \n      WHERE IsActive = 1 \n      GROUP BY StudentId) AS DocumentCounts \nWHERE DocumentCount > (SELECT AVG(DocumentCount) \n                       FROM (SELECT COUNT(DISTINCT Id) AS DocumentCount \n                             FROM StudentDocuments WITH (NOLOCK) \n                             WHERE IsActive = 1 \n                             GROUP BY StudentId) AS AvgCounts)",
      "sql_length": 485,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 116,
      "query": "get hierarchical totals using recursive CTEs",
      "complexity": "complex",
      "success": true,
      "response_time": 2088.505983352661,
      "sql": "WITH RecursiveCTE AS (\n    SELECT Id, StudentId, DocumentName, 1 AS Level\n    FROM StudentDocuments\n    WHERE IsActive = 1\n    UNION ALL\n    SELECT sd.Id, sd.StudentId, sd.DocumentName, Level + 1\n    FROM StudentDocuments sd\n    INNER JOIN RecursiveCTE rcte ON sd.ParentDocumentId = rcte.Id\n)\nSELECT COUNT(*) AS TotalDocuments\nFROM RecursiveCTE WITH (NOLOCK)",
      "sql_length": 358,
      "has_join": true,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 117,
      "query": "show path from student to root in family tree",
      "complexity": "standard",
      "success": true,
      "response_time": 654.8001766204834,
      "sql": "SELECT TOP 100 * FROM Students WITH (NOLOCK)",
      "sql_length": 44,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 118,
      "query": "find all descendants of a family patriarch",
      "complexity": "standard",
      "success": true,
      "response_time": 1672.7972030639648,
      "sql": "SELECT DISTINCT fm.Id, fm.FirstName, fm.LastName \nFROM FamilyMembers fm WITH (NOLOCK)\nJOIN FamilyMembers fm2 WITH (NOLOCK) ON fm.StudentId = fm2.StudentId\nWHERE fm2.Relationship = 'Patriarch' AND fm.IsDeceased = 0",
      "sql_length": 213,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 119,
      "query": "get transitive closure of relationships",
      "complexity": "standard",
      "success": true,
      "response_time": 5830.456495285034,
      "sql": "SELECT DISTINCT s1.Id AS StudentId, s2.Id AS RelatedStudentId\nFROM Students s1 WITH (NOLOCK)\nJOIN Students s2 WITH (NOLOCK) ON s1.Id <> s2.Id\nJOIN FamilyMembers fm WITH (NOLOCK) ON s1.Id = fm.StudentId OR s2.Id = fm.StudentId\nWHERE fm.IsDeceased = 0",
      "sql_length": 249,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 120,
      "query": "show bill of materials explosion for requirements",
      "complexity": "standard",
      "success": true,
      "response_time": 1403.3288955688477,
      "sql": "SELECT * FROM StudentDocuments WITH (NOLOCK) \nJOIN StudentDocumentsCepe WITH (NOLOCK) ON StudentDocuments.Id = StudentDocumentsCepe.StudentId \nWHERE StudentDocuments.IsActive = 1",
      "sql_length": 178,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 121,
      "query": "find connected components in relationship graph",
      "complexity": "complex",
      "success": true,
      "response_time": 1700.3650665283203,
      "sql": "SELECT DISTINCT s.Id \nFROM Students s WITH (NOLOCK)\nJOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nJOIN StudentDocuments sd2 WITH (NOLOCK) ON sd.Id = sd2.ParentDocumentId\nWHERE s.IsActive = 1",
      "sql_length": 206,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 122,
      "query": "get shortest path between related students",
      "complexity": "standard",
      "success": true,
      "response_time": 2367.455244064331,
      "sql": "SELECT s1.Id AS Student1Id, s2.Id AS Student2Id\nFROM Students s1 WITH (NOLOCK)\nJOIN FamilyMembers fm1 WITH (NOLOCK) ON s1.Id = fm1.StudentId\nJOIN FamilyMembers fm2 WITH (NOLOCK) ON fm1.Relationship = fm2.Relationship AND fm1.Id <> fm2.Id\nJOIN Students s2 WITH (NOLOCK) ON fm2.StudentId = s2.Id\nWHERE s1.IsActive = 1 AND s2.IsActive = 1",
      "sql_length": 335,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 123,
      "query": "show breadth-first traversal of connections",
      "complexity": "standard",
      "success": true,
      "response_time": 2180.2802085876465,
      "sql": "SELECT * FROM Students s WITH (NOLOCK)\nJOIN StudentInstitutions si WITH (NOLOCK) ON s.Id = si.StudentId\nJOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nJOIN FamilyMembers fm WITH (NOLOCK) ON s.Id = fm.StudentId\nJOIN StudentRecommendeds sr WITH (NOLOCK) ON s.StudentRecommendedId = sr.Id\nJOIN ScholarshipApplications sa WITH (NOLOCK) ON s.Id = sa.StudentId\nWHERE s.IsActive = 1",
      "sql_length": 390,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 124,
      "query": "find depth-first search results in hierarchy",
      "complexity": "standard",
      "success": true,
      "response_time": 2443.2806968688965,
      "sql": "SELECT * FROM StudentDocuments WITH (NOLOCK) \nWHERE IsActive = 1 \nAND ParentDocumentId IS NULL",
      "sql_length": 94,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 125,
      "query": "get topological sort of dependencies",
      "complexity": "standard",
      "success": true,
      "response_time": 1564.3603801727295,
      "sql": "SELECT DISTINCT sd.Id \nFROM StudentDocuments sd WITH (NOLOCK)\nJOIN StudentDocuments sd2 WITH (NOLOCK) ON sd.ParentDocumentId = sd2.Id\nWHERE sd.IsActive = 1 AND sd2.IsActive = 1\nORDER BY sd.CreatedAt",
      "sql_length": 198,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 126,
      "query": "show strongly connected components",
      "complexity": "complex",
      "success": true,
      "response_time": 1771.608591079712,
      "sql": "SELECT DISTINCT s.Id, s.FirstName, s.LastName \nFROM Students s WITH (NOLOCK)\nJOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nJOIN StudentDocuments sd2 WITH (NOLOCK) ON sd.Id = sd2.ParentDocumentId\nWHERE s.IsActive = 1",
      "sql_length": 231,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 127,
      "query": "find bridges and articulation points",
      "complexity": "standard",
      "success": true,
      "response_time": 1203.3944129943848,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE IsActive = 1",
      "sql_length": 55,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 128,
      "query": "get minimum spanning tree of relationships",
      "complexity": "standard",
      "success": true,
      "response_time": 1973.3810424804688,
      "sql": "SELECT DISTINCT s.Id, s.FirstName, s.LastName, si.InstitutionName, sd.DocumentName\nFROM Students s WITH (NOLOCK)\nJOIN StudentInstitutions si WITH (NOLOCK) ON s.Id = si.StudentId\nJOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nWHERE s.IsActive = 1",
      "sql_length": 260,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 129,
      "query": "show maximum flow in application pipeline",
      "complexity": "standard",
      "success": true,
      "response_time": 1125.2295970916748,
      "sql": "SELECT MAX(ScholarshipApplication.Status) AS MaxFlow\nFROM ScholarshipApplication WITH (NOLOCK)",
      "sql_length": 94,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 130,
      "query": "find critical path in process workflow",
      "complexity": "standard",
      "success": true,
      "response_time": 1381.3493251800537,
      "sql": "SELECT * FROM DocumentSubmissions ds WITH (NOLOCK)\nJOIN Students s ON ds.StudentId = s.Id\nJOIN StudentDocuments sd ON s.Id = sd.StudentId\nWHERE ds.Status = 'Critical' AND sd.IsActive = 1",
      "sql_length": 186,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 131,
      "query": "categorize students using nested CASE statements with multiple conditions",
      "complexity": "very_complex",
      "success": true,
      "response_time": 518.8181400299072,
      "sql": "SELECT COUNT(DISTINCT s.Id) AS total \n                          FROM Students s WITH (NOLOCK) \n                          LEFT JOIN Cities c1 WITH (NOLOCK) ON s.CityIdPhysical = c1.Id \n                          LEFT JOIN Cities c2 WITH (NOLOCK) ON s.CityIdPostal = c2.Id \n                          WHERE c1.Name LIKE '%CASE statements with multiple conditions%' \n                             OR c2.Name LIKE '%CASE statements with multiple conditions%'",
      "sql_length": 451,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 132,
      "query": "apply complex business rules with multiple WHEN clauses",
      "complexity": "complex",
      "success": true,
      "response_time": 2551.0716438293457,
      "sql": "SELECT \n    CASE \n        WHEN Status = 'Approved' THEN 'Application Approved'\n        WHEN Status = 'Pending' THEN 'Application Under Review'\n        WHEN Status = 'Rejected' THEN 'Application Rejected'\n        ELSE 'Unknown Status'\n    END AS ApplicationStatus,\n    COUNT(*) AS TotalApplications\nFROM ScholarshipApplications WITH (NOLOCK)\nGROUP BY \n    CASE \n        WHEN Status = 'Approved' THEN 'Application Approved'\n        WHEN Status = 'Pending' THEN 'Application Under Review'\n        WHEN Status = 'Rejected' THEN 'Application Rejected'\n        ELSE 'Unknown Status'\n    END",
      "sql_length": 584,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 133,
      "query": "implement decision trees using cascading conditions",
      "complexity": "standard",
      "success": true,
      "response_time": 1163.65647315979,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE IsActive = 1",
      "sql_length": 55,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 134,
      "query": "calculate scores using weighted multi-criteria evaluation",
      "complexity": "standard",
      "success": true,
      "response_time": 3357.3176860809326,
      "sql": "SELECT \n    s.Id AS StudentId,\n    s.FirstName,\n    s.LastName,\n    SUM(CASE WHEN sd.DocumentTypeId = 1 THEN 1 ELSE 0 END) * 0.4 +\n    SUM(CASE WHEN sd.DocumentTypeId = 2 THEN 1 ELSE 0 END) * 0.3 +\n    SUM(CASE WHEN sd.DocumentTypeId = 3 THEN 1 ELSE 0 END) * 0.2 +\n    SUM(CASE WHEN sd.DocumentTypeId = 4 THEN 1 ELSE 0 END) * 0.1 AS TotalScore\nFROM \n    Students s WITH (NOLOCK)\nJOIN \n    StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nWHERE \n    s.IsActive = 1\nGROUP BY \n    s.Id, s.FirstName, s.LastName",
      "sql_length": 515,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 135,
      "query": "find eligibility using compound boolean expressions",
      "complexity": "standard",
      "success": true,
      "response_time": 1379.2014122009277,
      "sql": "SELECT * FROM Students AS s WITH (NOLOCK)\nWHERE s.GPA >= 3.0 AND s.GraduationDate >= GETDATE() AND s.IsActive = 1",
      "sql_length": 113,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 136,
      "query": "apply different formulas based on category combinations",
      "complexity": "standard",
      "success": true,
      "response_time": 1581.5377235412598,
      "sql": "SELECT * FROM Students AS s WITH (NOLOCK)\nJOIN StudentDocuments AS sd WITH (NOLOCK) ON s.Id = sd.StudentId\nJOIN ScholarshipApplications AS sa WITH (NOLOCK) ON s.Id = sa.StudentId\nWHERE s.IsActive = 1",
      "sql_length": 199,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 137,
      "query": "implement finite state machine transitions in SQL",
      "complexity": "standard",
      "success": true,
      "response_time": 1148.5342979431152,
      "sql": "SELECT * FROM ScholarshipApplications WITH (NOLOCK) WHERE Status = 1",
      "sql_length": 68,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 138,
      "query": "calculate tiered pricing with boundary conditions",
      "complexity": "complex",
      "success": true,
      "response_time": 2349.0333557128906,
      "sql": "SELECT \n    CASE \n        WHEN Price < 100 THEN 'Tier 1'\n        WHEN Price >= 100 AND Price < 200 THEN 'Tier 2'\n        WHEN Price >= 200 AND Price < 300 THEN 'Tier 3'\n        ELSE 'Tier 4'\n    END AS PricingTier,\n    COUNT(*) AS Count\nFROM Products WITH (NOLOCK)\nGROUP BY \n    CASE \n        WHEN Price < 100 THEN 'Tier 1'\n        WHEN Price >= 100 AND Price < 200 THEN 'Tier 2'\n        WHEN Price >= 200 AND Price < 300 THEN 'Tier 3'\n        ELSE 'Tier 4'\n    END",
      "sql_length": 465,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 139,
      "query": "find matching using fuzzy logic rules",
      "complexity": "standard",
      "success": true,
      "response_time": 1661.5056991577148,
      "sql": "SELECT * FROM Students s WITH (NOLOCK)\nJOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nWHERE s.FirstName LIKE '%John%' OR s.LastName LIKE '%Doe%' OR sd.DocumentName LIKE '%Transcript%'",
      "sql_length": 198,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 140,
      "query": "apply temporal versioning with effective dates",
      "complexity": "complex",
      "success": true,
      "response_time": 5081.870079040527,
      "sql": "SELECT * FROM StudentDocuments WITH (NOLOCK) \nWHERE CreatedAt <= GETDATE() AND (ExpirationDate IS NULL OR ExpirationDate > GETDATE())",
      "sql_length": 133,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 141,
      "query": "implement slowly changing dimension type 2 logic",
      "complexity": "standard",
      "success": true,
      "response_time": 4374.81689453125,
      "sql": "SELECT \n    s.Id AS StudentId,\n    s.FirstName,\n    s.LastName,\n    s.MiddleName,\n    s.SecondLastName,\n    s.DateOfBirth,\n    s.Email,\n    s.MobilePhone,\n    s.HomePhone,\n    s.AddressLine1,\n    s.AddressLine2,\n    s.Municipality,\n    s.ZipCode,\n    s.HighSchoolName,\n    s.HighSchoolMunicipality,\n    s.GraduationDate,\n    s.GPA,\n    s.CollegeBoardScore,\n    s.CreatedAt,\n    s.UpdatedAt,\n    s.UserId,\n    s.UserId1,\n    s.CityIdPhysical,\n    s.CityIdPostal,\n    s.DriversLicense,\n    s.PostalAddressLine1,\n    s.PostalAddressLine2,\n    s.PostalZipCode,\n    s.HighSchoolId,\n    s.MaritalStatus,\n    s.OccupationId,\n    s.CreatedBy,\n    s.ModifiedBy,\n    s.StudentEmail,\n    s.StudentRecommendedId,\n    s.UniversityId,\n    s.UniversityMunicipioId,\n    s.UniversityRegionId,\n    s.UniversityCityId,\n    s.IsGovernmentLegalTutor,\n    s.IdentificationType,\n    s.IdentificationNumber,\n    s.SSN,\n    ROW_NUMBER() OVER (PARTITION BY s.Id ORDER BY s.UpdatedAt DESC) AS RowNum\nFROM \n    Students s WITH (NOLOCK)\nWHERE \n    s.Is",
      "sql_length": 1023,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": true,
      "method": "unknown",
      "error": null
    },
    {
      "id": 142,
      "query": "calculate pro-rated amounts with multiple factors",
      "complexity": "complex",
      "success": true,
      "response_time": 1397.1450328826904,
      "sql": "SELECT SUM(Amount) AS ProRatedAmount\nFROM ScholarshipApplications AS sa WITH (NOLOCK)\nJOIN Students AS s WITH (NOLOCK) ON sa.StudentId = s.Id\nWHERE sa.Status = 1 AND s.IsActive = 1",
      "sql_length": 180,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 143,
      "query": "find conflicts using complex constraint checking",
      "complexity": "standard",
      "success": true,
      "response_time": 1919.3813800811768,
      "sql": "SELECT DISTINCT sd.Id \nFROM StudentDocuments sd WITH (NOLOCK)\nJOIN Students s WITH (NOLOCK) ON sd.StudentId = s.Id\nJOIN ScholarshipApplications sa WITH (NOLOCK) ON s.Id = sa.StudentId\nWHERE sd.IsActive = 1 AND sa.Status <> 1",
      "sql_length": 224,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 144,
      "query": "apply validation rules with exception handling",
      "complexity": "very_complex",
      "success": true,
      "response_time": 1177.478313446045,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE IsActive = 1",
      "sql_length": 55,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 145,
      "query": "implement approval workflow with state transitions",
      "complexity": "complex",
      "success": true,
      "response_time": 2817.167282104492,
      "sql": "SELECT \n    sa.Id AS ApplicationId,\n    sa.ApplicationNumber,\n    sa.Status,\n    sa.SubmittedAt,\n    sa.ReviewedAt,\n    sa.ApprovedAt,\n    sa.Notes,\n    s.FirstName,\n    s.LastName,\n    s.Email\nFROM \n    ScholarshipApplications sa WITH (NOLOCK)\nJOIN \n    Students s WITH (NOLOCK) ON sa.StudentId = s.Id\nWHERE \n    sa.Status IN (1, 2, 3) -- Assuming 1: Pending, 2: Approved, 3: Rejected\nORDER BY \n    sa.SubmittedAt DESC",
      "sql_length": 419,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 146,
      "query": "calculate dynamic thresholds based on context",
      "complexity": "standard",
      "success": true,
      "response_time": 1416.379690170288,
      "sql": "SELECT * FROM ScholarshipDocumentTypes WITH (NOLOCK) WHERE IsActive = 1",
      "sql_length": 71,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 147,
      "query": "find anomalies using statistical process control",
      "complexity": "standard",
      "success": true,
      "response_time": 2639.220714569092,
      "sql": "SELECT \n    StudentId, \n    COUNT(*) AS DocumentCount \nFROM \n    StudentDocuments WITH (NOLOCK) \nWHERE \n    IsActive = 1 \nGROUP BY \n    StudentId \nHAVING \n    COUNT(*) > (SELECT AVG(DocumentCount) + 3 * STDEV(DocumentCount) \n                 FROM (SELECT COUNT(*) AS DocumentCount \n                       FROM StudentDocuments WITH (NOLOCK) \n                       WHERE IsActive = 1 \n                       GROUP BY StudentId) AS SubQuery) \nORDER BY \n    DocumentCount DESC",
      "sql_length": 474,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 148,
      "query": "apply regulatory compliance rules",
      "complexity": "standard",
      "success": true,
      "response_time": 1234.179973602295,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE IsActive = 1",
      "sql_length": 55,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 149,
      "query": "implement role-based access control logic",
      "complexity": "standard",
      "success": true,
      "response_time": 978.5008430480957,
      "sql": "SELECT * FROM AspNetRoles WITH (NOLOCK)",
      "sql_length": 39,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 150,
      "query": "calculate risk scores using multiple factors",
      "complexity": "standard",
      "success": true,
      "response_time": 4020.376205444336,
      "sql": "SELECT \n    s.Id AS StudentId,\n    SUM(CASE WHEN d.GPA < 2.0 THEN 1 ELSE 0 END) AS LowGPA,\n    SUM(CASE WHEN d.CollegeBoardScore < 1000 THEN 1 ELSE 0 END) AS LowCollegeBoardScore,\n    SUM(CASE WHEN f.AnnualIncome < 30000 THEN 1 ELSE 0 END) AS LowIncome,\n    COUNT(DISTINCT a.Id) AS ApplicationCount\nFROM \n    Students s WITH (NOLOCK)\nLEFT JOIN \n    ScholarshipApplications a WITH (NOLOCK) ON s.Id = a.StudentId\nLEFT JOIN \n    FamilyMembers f WITH (NOLOCK) ON s.Id = f.StudentId\nLEFT JOIN \n    (SELECT StudentId, AVG(GPA) AS GPA, AVG(CollegeBoardScore) AS CollegeBoardScore \n     FROM Students \n     GROUP BY StudentId) d ON s.Id = d.StudentId\nWHERE \n    s.IsActive = 1\nGROUP BY \n    s.Id",
      "sql_length": 687,
      "has_join": true,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 151,
      "query": "find optimization using constraint satisfaction",
      "complexity": "standard",
      "success": true,
      "response_time": 1177.2503852844238,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE IsActive = 1",
      "sql_length": 55,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 152,
      "query": "apply machine learning decision boundaries",
      "complexity": "standard",
      "success": true,
      "response_time": 1443.3863162994385,
      "sql": "SELECT * FROM Students WITH (NOLOCK)",
      "sql_length": 36,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 153,
      "query": "implement recommendation engine logic",
      "complexity": "standard",
      "success": true,
      "response_time": 4154.62589263916,
      "sql": "SELECT DISTINCT sr.Id, sr.NombreEstudiante, sr.GPA, sr.CollegeBoardEspanol, sr.CollegeBoardMatematicas, sr.CollegeBoardIngles\nFROM StudentRecommendeds sr WITH (NOLOCK)\nJOIN Students s WITH (NOLOCK) ON sr.StudentId = s.Id\nWHERE sr.IsPreapproved = 1 AND s.IsActive = 1\nORDER BY sr.GPA DESC",
      "sql_length": 287,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 154,
      "query": "calculate similarity scores with multiple metrics",
      "complexity": "complex",
      "success": true,
      "response_time": 2853.8496494293213,
      "sql": "SELECT \n    s.Id AS StudentId,\n    s.FirstName,\n    s.LastName,\n    COUNT(DISTINCT sd.Id) AS DocumentCount,\n    AVG(CASE WHEN sd.IsVerified = 1 THEN 1 ELSE 0 END) AS VerifiedScore,\n    AVG(CASE WHEN sd.IsActive = 1 THEN 1 ELSE 0 END) AS ActiveScore\nFROM \n    Students s WITH (NOLOCK)\nLEFT JOIN \n    StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nGROUP BY \n    s.Id, s.FirstName, s.LastName",
      "sql_length": 399,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 155,
      "query": "find best matches using preference rankings",
      "complexity": "complex",
      "success": true,
      "response_time": 1991.3294315338135,
      "sql": "SELECT s.Id, s.FirstName, s.LastName, sr.GPA, sr.TotalCollegeBoard\nFROM Students s WITH (NOLOCK)\nJOIN StudentRecommendeds sr WITH (NOLOCK) ON s.StudentRecommendedId = sr.Id\nWHERE sr.IsPreapproved = 1\nORDER BY sr.GPA DESC, sr.TotalCollegeBoard DESC",
      "sql_length": 247,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 156,
      "query": "find students in city A but not in city B using EXCEPT",
      "complexity": "moderate",
      "success": true,
      "response_time": 510.3628635406494,
      "sql": "SELECT COUNT(DISTINCT s.Id) AS total \n                                  FROM Students s WITH (NOLOCK) \n                                  LEFT JOIN Cities c1 WITH (NOLOCK) ON s.CityIdPhysical = c1.Id LEFT JOIN Cities c2 WITH (NOLOCK) ON s.CityIdPostal = c2.Id LEFT JOIN Cities c3 WITH (NOLOCK) ON s.UniversityCityId = c3.Id\n                                  WHERE c1.Name LIKE '%A but not in city B using EXCEPT%' OR c2.Name LIKE '%A but not in city B using EXCEPT%' OR c3.Name LIKE '%A but not in city B using EXCEPT%'",
      "sql_length": 518,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 157,
      "query": "get union of active and pending applications",
      "complexity": "moderate",
      "success": true,
      "response_time": 1651.228666305542,
      "sql": "SELECT * FROM ScholarshipApplication WITH (NOLOCK) WHERE Status IN (0, 1) AND IsActive = 1\nUNION\nSELECT * FROM ScholarshipApplications WITH (NOLOCK) WHERE Status IN (0, 1) AND IsActive = 1",
      "sql_length": 188,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 158,
      "query": "show intersection of high achievers and scholarship recipients",
      "complexity": "moderate",
      "success": true,
      "response_time": 1565.8056735992432,
      "sql": "SELECT DISTINCT s.Id, s.FirstName, s.LastName, s.GPA \nFROM Students s WITH (NOLOCK)\nJOIN ScholarshipApplications sa WITH (NOLOCK) ON s.Id = sa.StudentId\nWHERE s.GPA >= 3.5 AND sa.Status = 1",
      "sql_length": 189,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 159,
      "query": "find symmetric difference between two student groups",
      "complexity": "standard",
      "success": true,
      "response_time": 2377.8629302978516,
      "sql": "SELECT DISTINCT s1.Id \nFROM Students s1 WITH (NOLOCK)\nLEFT JOIN Students s2 WITH (NOLOCK) ON s1.Id = s2.Id\nWHERE s1.IsActive = 1 AND s2.Id IS NULL\n\nUNION\n\nSELECT DISTINCT s2.Id \nFROM Students s2 WITH (NOLOCK)\nLEFT JOIN Students s1 WITH (NOLOCK) ON s1.Id = s2.Id\nWHERE s2.IsActive = 1 AND s1.Id IS NULL",
      "sql_length": 301,
      "has_join": true,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 160,
      "query": "get students satisfying any of 5 complex criteria using OR",
      "complexity": "standard",
      "success": true,
      "response_time": 1706.7601680755615,
      "sql": "SELECT * FROM Students WITH (NOLOCK)\nWHERE IsActive = 1 \nAND (GPA > 3.5 OR GraduationDate > '2023-05-01' OR HighSchoolName LIKE '%High School%' OR Email LIKE '%@example.com' OR MobilePhone IS NOT NULL)",
      "sql_length": 201,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 161,
      "query": "show records meeting all of 7 conditions using AND",
      "complexity": "standard",
      "success": true,
      "response_time": 1774.8045921325684,
      "sql": "SELECT * FROM Students AS s WITH (NOLOCK)\nWHERE s.IsActive = 1 \nAND s.GPA >= 3.0 \nAND s.GraduationDate >= GETDATE() \nAND s.HighSchoolId IS NOT NULL \nAND s.StudentEmail LIKE '%@example.com' \nAND s.CreatedAt >= DATEADD(year, -1, GETDATE()) \nAND s.ModifiedBy IS NOT NULL",
      "sql_length": 267,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 162,
      "query": "find mutually exclusive groups using NOT EXISTS",
      "complexity": "standard",
      "success": true,
      "response_time": 1716.0260677337646,
      "sql": "SELECT DISTINCT s1.Id \nFROM Students s1 WITH (NOLOCK) \nWHERE NOT EXISTS (\n    SELECT 1 \n    FROM Students s2 WITH (NOLOCK) \n    WHERE s1.Id <> s2.Id \n    AND s1.FirstName = s2.FirstName \n    AND s1.LastName = s2.LastName\n)",
      "sql_length": 222,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 163,
      "query": "get records present in all specified tables",
      "complexity": "standard",
      "success": true,
      "response_time": 3011.826515197754,
      "sql": "SELECT DISTINCT sd.Id \nFROM StudentDocuments sd WITH (NOLOCK)\nJOIN StudentDocuments_Backup_Production_20250723 sdbp WITH (NOLOCK) ON sd.Id = sdbp.Id\nJOIN StudentDocuments_Copy sdc WITH (NOLOCK) ON sd.Id = sdc.Id\nJOIN StudentDocumentsRick sdr WITH (NOLOCK) ON sd.Id = sdr.Id\nJOIN StudentDocumentsRick2 sdr2 WITH (NOLOCK) ON sd.Id = sdr2.Id\nJOIN StudentDocumentsSave sds WITH (NOLOCK) ON sd.Id = sds.Id\nWHERE sd.IsActive = 1 AND sdbp.IsActive = 1 AND sdc.IsActive = 1 AND sdr.IsActive = 1 AND sdr2.IsActive = 1 AND sds.IsActive = 1",
      "sql_length": 529,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 164,
      "query": "show partial matches using IN with subqueries",
      "complexity": "complex",
      "success": true,
      "response_time": 2211.268663406372,
      "sql": "SELECT * FROM Students WITH (NOLOCK) \nWHERE Id IN (SELECT StudentId FROM StudentDocuments WITH (NOLOCK) WHERE IsActive = 1) \nOR Id IN (SELECT StudentId FROM StudentInstitutions WITH (NOLOCK) WHERE IsActive = 1) \nOR Id IN (SELECT StudentId FROM FamilyMembers WITH (NOLOCK) WHERE IsDeceased = 0) \nOR Id IN (SELECT StudentId FROM ScholarshipApplication WITH (NOLOCK) WHERE Status = 1)",
      "sql_length": 381,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 165,
      "query": "find records absent from any related table",
      "complexity": "standard",
      "success": true,
      "response_time": 2267.702579498291,
      "sql": "SELECT s.Id \nFROM Students s WITH (NOLOCK)\nLEFT JOIN StudentDocuments sd ON s.Id = sd.StudentId\nLEFT JOIN StudentInstitutions si ON s.Id = si.StudentId\nLEFT JOIN FamilyMembers fm ON s.Id = fm.StudentId\nLEFT JOIN ScholarshipApplications sa ON s.Id = sa.StudentId\nLEFT JOIN DocumentSubmissions ds ON s.Id = ds.StudentId\nWHERE sd.Id IS NULL \nAND si.Id IS NULL \nAND fm.Id IS NULL \nAND sa.Id IS NULL \nAND ds.Id IS NULL",
      "sql_length": 413,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 166,
      "query": "get Cartesian product with filtering",
      "complexity": "complex",
      "success": true,
      "response_time": 1420.2854633331299,
      "sql": "SELECT * FROM StudentDocuments AS sd WITH (NOLOCK) \nCROSS JOIN StudentInstitutions AS si WITH (NOLOCK) \nWHERE sd.IsActive = 1 AND si.IsCurrentInstitution = 1",
      "sql_length": 157,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 167,
      "query": "show semi-join results without duplicates",
      "complexity": "complex",
      "success": true,
      "response_time": 2952.6522159576416,
      "sql": "SELECT DISTINCT sd.* \nFROM StudentDocuments sd WITH (NOLOCK)\nJOIN Students s WITH (NOLOCK) ON sd.StudentId = s.Id\nWHERE sd.IsActive = 1",
      "sql_length": 135,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 168,
      "query": "find anti-join patterns",
      "complexity": "standard",
      "success": true,
      "response_time": 1436.4612102508545,
      "sql": "SELECT s.Id \nFROM Students s WITH (NOLOCK)\nLEFT JOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nWHERE sd.Id IS NULL",
      "sql_length": 129,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 169,
      "query": "get full outer join with null handling",
      "complexity": "complex",
      "success": true,
      "response_time": 1631.6242218017578,
      "sql": "SELECT *\nFROM StudentDocuments sd WITH (NOLOCK)\nFULL OUTER JOIN StudentDocumentsCepe sdc WITH (NOLOCK) ON sd.Id = sdc.Id\nWHERE sd.IsActive = 1 OR sdc.IsActive = 1",
      "sql_length": 162,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 170,
      "query": "show natural join with ambiguity resolution",
      "complexity": "complex",
      "success": true,
      "response_time": 3645.3871726989746,
      "sql": "SELECT * FROM Students AS s WITH (NOLOCK)\nJOIN StudentDocuments AS sd WITH (NOLOCK) ON s.Id = sd.StudentId\nJOIN StudentDocuments_202050807_3pm AS sd2 WITH (NOLOCK) ON s.Id = sd2.StudentId\nJOIN StudentDocuments_Backup_20250811_055943 AS sd3 WITH (NOLOCK) ON s.Id = sd3.StudentId\nJOIN StudentDocuments_Backup_Duplicates AS sd4 WITH (NOLOCK) ON s.Id = sd4.StudentId\nJOIN StudentDocuments_Backup_Production_20250723 AS sd5 WITH (NOLOCK) ON s.Id = sd5.StudentId\nJOIN StudentDocuments_Copy AS sd6 WITH (NOLOCK) ON s.Id = sd6.StudentId\nJOIN StudentDocumentsRick AS sd7 WITH (NOLOCK) ON s.Id = sd7.StudentId\nJOIN StudentDocumentsRick2 AS sd8 WITH (NOLOCK) ON s.Id = sd8.StudentId\nJOIN StudentDocumentsSave AS sd9 WITH (NOLOCK) ON s.Id = sd9.StudentId",
      "sql_length": 742,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 171,
      "query": "find cross apply results with table functions",
      "complexity": "very_complex",
      "success": true,
      "response_time": 7761.104106903076,
      "sql": "SELECT * FROM Students s WITH (NOLOCK)\nCROSS APPLY (SELECT * FROM StudentDocuments sd WITH (NOLOCK) WHERE sd.StudentId = s.Id) AS DocumentResults",
      "sql_length": 145,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 172,
      "query": "get outer apply with default values",
      "complexity": "very_complex",
      "success": true,
      "response_time": 3018.526315689087,
      "sql": "SELECT \n    s.Id AS StudentId,\n    s.FirstName,\n    s.LastName,\n    ISNULL(sd.DocumentName, 'Default Document Name') AS DocumentName,\n    ISNULL(sd.FileName, 'Default File Name') AS FileName\nFROM \n    Students s WITH (NOLOCK)\nOUTER APPLY (\n    SELECT TOP 1 \n        DocumentName, \n        FileName \n    FROM \n        StudentDocuments sd WITH (NOLOCK)\n    WHERE \n        sd.StudentId = s.Id AND sd.IsActive = 1\n) sd",
      "sql_length": 414,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 173,
      "query": "show lateral join with correlated subqueries",
      "complexity": "complex",
      "success": true,
      "response_time": 3147.4952697753906,
      "sql": "SELECT sd.*, \n       (SELECT COUNT(*) \n        FROM StudentDocuments sd2 \n        WHERE sd2.StudentId = sd.StudentId AND sd2.IsActive = 1) AS ActiveDocumentCount\nFROM StudentDocuments sd WITH (NOLOCK) \nWHERE sd.IsActive = 1",
      "sql_length": 223,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 174,
      "query": "find pivot results with dynamic columns",
      "complexity": "very_complex",
      "success": true,
      "response_time": 1917.4535274505615,
      "sql": "SELECT * FROM (SELECT StudentId, DocumentTypeId, COUNT(*) AS DocumentCount \nFROM StudentDocuments WITH (NOLOCK) \nGROUP BY StudentId, DocumentTypeId) AS SourceTable \nPIVOT (SUM(DocumentCount) FOR DocumentTypeId IN ([1], [2], [3], [4], [5])) AS PivotTable",
      "sql_length": 253,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 175,
      "query": "get unpivot of normalized data",
      "complexity": "complex",
      "success": true,
      "response_time": 4733.534097671509,
      "sql": "SELECT \n    StudentId,\n    DocumentName,\n    Description,\n    FileName,\n    ContentType,\n    FileSize,\n    FilePath,\n    BlobUrl,\n    FileHash,\n    Status,\n    IsRequired,\n    IsVerified,\n    VerifiedAt,\n    VerifiedBy,\n    ExpirationDate,\n    ReviewNotes,\n    ReviewedBy,\n    ReviewedAt,\n    IssuingAuthority,\n    IssueDate,\n    DocumentNumber,\n    Version,\n    IsOriginal,\n    ParentDocumentId,\n    Notes,\n    CreatedAt,\n    UpdatedAt,\n    UploadedBy,\n    DocumentTypeId,\n    ExtractedText,\n    ExtractionError,\n    ExtractionStatus,\n    IsActive,\n    IsEncrypted,\n    OriginalFileName,\n    StorageLocation,\n    StoredFileName,\n    TextExtractedAt,\n    SubmissionId\nFROM \n    StudentDocuments WITH (NOLOCK)\nWHERE \n    IsActive = 1",
      "sql_length": 732,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 176,
      "query": "calculate business days between application and approval excluding holidays",
      "complexity": "standard",
      "success": true,
      "response_time": 1849.8597145080566,
      "sql": "SELECT COUNT(*) AS BusinessDays\nFROM (\n    SELECT DATEDIFF(DAY, a.SubmittedAt, a.ApprovedAt) AS TotalDays\n    FROM ScholarshipApplications a WITH (NOLOCK)\n    WHERE a.ApprovedAt IS NOT NULL\n) AS Days\nWHERE TotalDays > 0 AND TotalDays NOT IN (SELECT HolidayDate FROM Holidays WITH (NOLOCK))",
      "sql_length": 289,
      "has_join": false,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 177,
      "query": "find applications submitted in last fiscal quarter",
      "complexity": "standard",
      "success": true,
      "response_time": 1564.4714832305908,
      "sql": "SELECT * FROM ScholarshipApplication WITH (NOLOCK) \nWHERE SubmittedAt >= DATEADD(QUARTER, -1, GETDATE()) \nAND SubmittedAt < GETDATE() \nAND AcademicYear = YEAR(GETDATE())",
      "sql_length": 169,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 178,
      "query": "get age in years, months, and days at time of application",
      "complexity": "standard",
      "success": true,
      "response_time": 2531.5704345703125,
      "sql": "SELECT \n    DATEDIFF(YEAR, s.DateOfBirth, a.SubmittedAt) AS AgeInYears,\n    DATEDIFF(MONTH, s.DateOfBirth, a.SubmittedAt) % 12 AS AgeInMonths,\n    DATEDIFF(DAY, DATEADD(MONTH, DATEDIFF(MONTH, 0, s.DateOfBirth), 0), a.SubmittedAt) % 30 AS AgeInDays\nFROM \n    ScholarshipApplication a WITH (NOLOCK)\nJOIN \n    Students s WITH (NOLOCK) ON a.StudentId = s.Id",
      "sql_length": 353,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 179,
      "query": "show timezone-aware timestamp conversions",
      "complexity": "standard",
      "success": true,
      "response_time": 1641.6478157043457,
      "sql": "SELECT CURRENT_TIMESTAMP AT TIME ZONE 'UTC' AS UtcTime, \n       CURRENT_TIMESTAMP AT TIME ZONE 'Pacific Standard Time' AS PacificTime, \n       CURRENT_TIMESTAMP AT TIME ZONE 'Eastern Standard Time' AS EasternTime \nWITH (NOLOCK)",
      "sql_length": 227,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 180,
      "query": "calculate duration using date arithmetic with leap years",
      "complexity": "complex",
      "success": true,
      "response_time": 1439.833402633667,
      "sql": "SELECT DATEDIFF(DAY, '2000-01-01', '2023-10-01') AS DurationInDays WITH (NOLOCK)",
      "sql_length": 80,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 181,
      "query": "find overlapping date ranges between records",
      "complexity": "complex",
      "success": true,
      "response_time": 1770.8842754364014,
      "sql": "SELECT a.Id, a.StartDate, a.EndDate, b.Id, b.StartDate, b.EndDate\nFROM StudentInstitutions a WITH (NOLOCK)\nJOIN StudentInstitutions b WITH (NOLOCK) ON a.StudentId = b.StudentId\nWHERE a.StartDate < b.EndDate AND a.EndDate > b.StartDate AND a.Id <> b.Id",
      "sql_length": 251,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 182,
      "query": "get records with dates in multiple calendars",
      "complexity": "complex",
      "success": true,
      "response_time": 1347.8984832763672,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE CreatedAt >= '2023-01-01' AND CreatedAt <= '2023-10-31'",
      "sql_length": 98,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 183,
      "query": "show temporal joins with validity periods",
      "complexity": "complex",
      "success": true,
      "response_time": 1887.8824710845947,
      "sql": "SELECT sd.*, si.*, s.*\nFROM StudentDocuments sd WITH (NOLOCK)\nJOIN StudentInstitutions si WITH (NOLOCK) ON sd.StudentId = si.StudentId\nJOIN Students s WITH (NOLOCK) ON sd.StudentId = s.Id\nWHERE si.StartDate <= GETDATE() AND (si.EndDate IS NULL OR si.EndDate >= GETDATE()) AND sd.IsActive = 1",
      "sql_length": 291,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 184,
      "query": "calculate sliding time windows with custom intervals",
      "complexity": "very_complex",
      "success": true,
      "response_time": 2248.7003803253174,
      "sql": "SELECT \n    COUNT(*) AS TotalDocuments\nFROM \n    StudentDocuments AS sd WITH (NOLOCK)\nJOIN \n    Students AS s WITH (NOLOCK) ON sd.StudentId = s.Id\nWHERE \n    sd.IsActive = 1\nAND \n    sd.CreatedAt >= DATEADD(DAY, -30, GETDATE())",
      "sql_length": 227,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 185,
      "query": "find gaps in temporal sequences",
      "complexity": "standard",
      "success": true,
      "response_time": 1894.9692249298096,
      "sql": "SELECT DISTINCT s.Id \nFROM Students s WITH (NOLOCK)\nLEFT JOIN StudentDocuments sd WITH (NOLOCK) ON s.Id = sd.StudentId\nLEFT JOIN DocumentSubmissions ds WITH (NOLOCK) ON s.Id = ds.StudentId\nWHERE sd.IsActive = 1 AND ds.IsComplete = 0",
      "sql_length": 232,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 186,
      "query": "get period-over-period comparisons with alignment",
      "complexity": "very_complex",
      "success": true,
      "response_time": 2226.7227172851562,
      "sql": "SELECT \n    YEAR(ScholarshipApplication.SubmittedAt) AS Year,\n    MONTH(ScholarshipApplication.SubmittedAt) AS Month,\n    COUNT(DISTINCT ScholarshipApplication.Id) AS TotalApplications\nFROM \n    ScholarshipApplication WITH (NOLOCK)\nWHERE \n    ScholarshipApplication.Status = 1 -- Assuming 1 is for approved applications\nGROUP BY \n    YEAR(ScholarshipApplication.SubmittedAt), \n    MONTH(ScholarshipApplication.SubmittedAt)\nORDER BY \n    Year, Month",
      "sql_length": 448,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 187,
      "query": "show seasonality adjustments in time series",
      "complexity": "standard",
      "success": true,
      "response_time": 1473.242998123169,
      "sql": "SELECT * FROM ScholarshipApplications WITH (NOLOCK)",
      "sql_length": 51,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 188,
      "query": "calculate custom fiscal periods",
      "complexity": "standard",
      "success": true,
      "response_time": 1852.6999950408936,
      "sql": "SELECT \n    YEAR(SubmittedAt) AS FiscalYear,\n    DATEPART(QUARTER, SubmittedAt) AS FiscalQuarter,\n    COUNT(*) AS TotalApplications\nFROM \n    ScholarshipApplication WITH (NOLOCK)\nGROUP BY \n    YEAR(SubmittedAt), DATEPART(QUARTER, SubmittedAt)\nORDER BY \n    FiscalYear, FiscalQuarter",
      "sql_length": 282,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 189,
      "query": "find temporal dependencies and prerequisites",
      "complexity": "standard",
      "success": true,
      "response_time": 1746.8650341033936,
      "sql": "SELECT DISTINCT sd.Id \nFROM StudentDocuments sd WITH (NOLOCK)\nJOIN StudentDocuments sd2 WITH (NOLOCK) ON sd.StudentId = sd2.StudentId\nWHERE sd.IsActive = 1 AND sd2.IsActive = 1",
      "sql_length": 176,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 190,
      "query": "get point-in-time snapshots of data",
      "complexity": "standard",
      "success": true,
      "response_time": 1414.2608642578125,
      "sql": "SELECT * FROM StudentDocuments WITH (NOLOCK) WHERE CreatedAt <= '2023-10-31' AND IsActive = 1",
      "sql_length": 93,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 191,
      "query": "parse complex formatted strings using SUBSTRING and CHARINDEX",
      "complexity": "standard",
      "success": true,
      "response_time": 1765.2866840362549,
      "sql": "SELECT SUBSTRING(ColumnName, CHARINDEX('Start', ColumnName) + LEN('Start'), CHARINDEX('End', ColumnName) - CHARINDEX('Start', ColumnName) - LEN('Start')) AS ParsedString\nFROM TableName WITH (NOLOCK)",
      "sql_length": 198,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 192,
      "query": "extract patterns using regular expressions",
      "complexity": "standard",
      "success": true,
      "response_time": 2507.136344909668,
      "sql": "SELECT * FROM StudentDocuments WITH (NOLOCK) WHERE IsActive = 1",
      "sql_length": 63,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 193,
      "query": "calculate edit distance between strings",
      "complexity": "standard",
      "success": true,
      "response_time": 1488.5342121124268,
      "sql": "SELECT dbo.fn_edit_distance(a.String1, b.String2) AS EditDistance\nFROM TableA a WITH (NOLOCK)\nJOIN TableB b WITH (NOLOCK) ON a.Id = b.Id",
      "sql_length": 136,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 194,
      "query": "find phonetic matches using SOUNDEX",
      "complexity": "standard",
      "success": true,
      "response_time": 1812.1306896209717,
      "sql": "SELECT * FROM Students WITH (NOLOCK) WHERE SOUNDEX(FirstName) = SOUNDEX('John') OR SOUNDEX(LastName) = SOUNDEX('Doe')",
      "sql_length": 117,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 195,
      "query": "get longest common subsequence",
      "complexity": "standard",
      "success": true,
      "response_time": 1459.810733795166,
      "sql": "SELECT * FROM Students WITH (NOLOCK)",
      "sql_length": 36,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 196,
      "query": "show string similarity using trigrams",
      "complexity": "standard",
      "success": true,
      "response_time": 1906.4569473266602,
      "sql": "SELECT a.Id, a.DocumentName, b.DocumentName \nFROM StudentDocuments a WITH (NOLOCK)\nJOIN StudentDocuments b WITH (NOLOCK) ON a.Id <> b.Id\nWHERE a.IsActive = 1 AND b.IsActive = 1 \nAND (SELECT COUNT(*) FROM sys.dm_fts_index_keywords('StudentDocuments', 'trigram', a.DocumentName, b.DocumentName)) > 0",
      "sql_length": 297,
      "has_join": true,
      "has_subquery": true,
      "has_aggregation": true,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 197,
      "query": "calculate Levenshtein distance for fuzzy matching",
      "complexity": "standard",
      "success": true,
      "response_time": 1635.6008052825928,
      "sql": "SELECT dbo.LevenshteinDistance(a.DocumentName, b.DocumentName) AS Distance\nFROM StudentDocuments a WITH (NOLOCK)\nJOIN StudentDocuments b WITH (NOLOCK) ON a.Id <> b.Id\nWHERE a.IsActive = 1 AND b.IsActive = 1",
      "sql_length": 206,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 198,
      "query": "find palindromes using string reversal",
      "complexity": "standard",
      "success": true,
      "response_time": 1126.601219177246,
      "sql": "SELECT DocumentName \nFROM StudentDocuments WITH (NOLOCK) \nWHERE DocumentName = REVERSE(DocumentName)",
      "sql_length": 100,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 199,
      "query": "get formatted output with complex concatenation",
      "complexity": "complex",
      "success": true,
      "response_time": 1749.6016025543213,
      "sql": "SELECT \n    CONCAT(s.FirstName, ' ', s.LastName, ' - ', d.DocumentName) AS FormattedOutput\nFROM \n    Students s WITH (NOLOCK)\nJOIN \n    StudentDocuments d WITH (NOLOCK) ON s.Id = d.StudentId\nWHERE \n    s.IsActive = 1 AND d.IsActive = 1",
      "sql_length": 235,
      "has_join": true,
      "has_subquery": false,
      "has_aggregation": false,
      "has_groupby": false,
      "has_window": false,
      "method": "unknown",
      "error": null
    },
    {
      "id": 200,
      "query": "show text analysis with word frequency",
      "complexity": "complex",
      "success": true,
      "response_time": 1592.9908752441406,
      "sql": "SELECT ExtractedText, COUNT(*) AS WordFrequency \nFROM StudentDocuments WITH (NOLOCK) \nWHERE IsActive = 1 \nGROUP BY ExtractedText",
      "sql_length": 128,
      "has_join": false,
      "has_subquery": false,
      "has_aggregation": true,
      "has_groupby": true,
      "has_window": false,
      "method": "unknown",
      "error": null
    }
  ]
}